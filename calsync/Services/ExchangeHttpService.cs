using CalSync.Models;
using Microsoft.Extensions.Configuration;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Xml;

namespace CalSync.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä—è–º–æ–≥–æ HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Exchange Web Services —á–µ—Ä–µ–∑ SOAP
/// –û–±—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—ã Microsoft.Exchange.WebServices —Å .NET 8
/// </summary>
public class ExchangeHttpService : IDisposable
{
    private readonly HttpClient _httpClient;
    private readonly IConfiguration _configuration;
    private readonly string _serviceUrl;
    private readonly string _domain;
    private readonly string _username;
    private readonly string _password;
    private readonly string _sendMeetingInvitations;
    private readonly string _sendMeetingCancellations;
    private readonly string _defaultTimeZone;
    private bool _disposed = false;

    public ExchangeHttpService(IConfiguration configuration)
    {
        _configuration = configuration;
        var exchangeConfig = _configuration.GetSection("Exchange");

        _serviceUrl = exchangeConfig["ServiceUrl"] ?? throw new ArgumentException("ServiceUrl –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
        _domain = exchangeConfig["Domain"] ?? "";
        _username = exchangeConfig["Username"] ?? throw new ArgumentException("Username –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
        _password = exchangeConfig["Password"] ?? throw new ArgumentException("Password –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:
        // SendToNone - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        // SendOnlyToAll - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö)
        // SendToAllAndSaveCopy - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–ø–∏—é –≤ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
        _sendMeetingInvitations = exchangeConfig["SendMeetingInvitations"] ?? "SendToAllAndSaveCopy";
        _sendMeetingCancellations = exchangeConfig["SendMeetingCancellations"] ?? "SendToAllAndSaveCopy";

        // –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã –∏–∑ —Å–µ–∫—Ü–∏–∏ CalSync
        var calSyncConfig = _configuration.GetSection("CalSync");
        _defaultTimeZone = calSyncConfig["DefaultTimeZone"] ?? "Europe/Moscow";

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç
        var handler = new HttpClientHandler();

        // –û—Ç–∫–ª—é—á–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é SSL –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
        var validateSsl = exchangeConfig["ValidateSslCertificate"]?.ToLower() != "false";
        if (!validateSsl)
        {
            handler.ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => true;
            Console.WriteLine("‚ö†Ô∏è  SSL –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞");
        }

        _httpClient = new HttpClient(handler);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        var credentials = !string.IsNullOrEmpty(_domain) ?
            $"{_domain}\\{_username}" : _username;

        var authValue = Convert.ToBase64String(Encoding.ASCII.GetBytes($"{credentials}:{_password}"));
        _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic", authValue);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        if (int.TryParse(exchangeConfig["RequestTimeout"], out var timeout) && timeout > 0)
        {
            _httpClient.Timeout = TimeSpan.FromMilliseconds(timeout);
        }

        Console.WriteLine($"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Exchange HTTP Service");
        Console.WriteLine($"üåê URL: {_serviceUrl}");
        Console.WriteLine($"üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {credentials}");
        Console.WriteLine($"üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: —Å–æ–∑–¥–∞–Ω–∏–µ={_sendMeetingInvitations}, —É–¥–∞–ª–µ–Ω–∏–µ={_sendMeetingCancellations}");
        Console.WriteLine($"üåç –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {_defaultTimeZone}");
    }

    /// <summary>
    /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Exchange
    /// </summary>
    public async Task<bool> TestConnectionAsync()
    {
        try
        {
            Console.WriteLine("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Exchange...");

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π SOAP –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–∫–∏ Inbox
            var soapRequest = CreateGetFolderSoapRequest();
            var response = await SendSoapRequestAsync(soapRequest);

            if (response.Contains("Success"))
            {
                Console.WriteLine("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Exchange —É—Å–ø–µ—à–Ω–æ!");
                return true;
            }
            else if (response.Contains("Unauthorized"))
            {
                Console.WriteLine("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Exchange");
                return false;
            }
            else
            {
                Console.WriteLine("‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Exchange, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏...");
                Console.WriteLine($"üìù –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞: {response.Substring(0, Math.Min(500, response.Length))}");
                return true; // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –ª—é–±–æ–π –æ—Ç–≤–µ—Ç
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —á–µ—Ä–µ–∑ SOAP –∑–∞–ø—Ä–æ—Å
    /// </summary>
    public async Task<List<CalendarEvent>> GetCalendarEventsAsync(DateTime? startDate = null, DateTime? endDate = null)
    {
        var events = new List<CalendarEvent>();

        try
        {
            Console.WriteLine("üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è —á–µ—Ä–µ–∑ SOAP...");

            var start = startDate ?? DateTime.Today;
            var end = endDate ?? DateTime.Today.AddDays(1);

            Console.WriteLine($"üìÖ –ü–µ—Ä–∏–æ–¥: {start:yyyy-MM-dd} - {end:yyyy-MM-dd}");

            var soapRequest = CreateGetCalendarEventsSoapRequest(start, end);
            var response = await SendSoapRequestAsync(soapRequest);

            Console.WriteLine($"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Exchange ({response.Length} —Å–∏–º–≤–æ–ª–æ–≤)");

            // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            events = ParseCalendarEventsFromResponse(response);

            Console.WriteLine($"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {events.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {ex.Message}");
        }

        return events;
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SOAP –∑–∞–ø—Ä–æ—Å
    /// </summary>
    public async Task<bool> UpdateCalendarEventAsync(CalendarEvent calendarEvent)
    {
        try
        {
            Console.WriteLine($"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ SOAP: {calendarEvent.Summary}");

            var soapRequest = CreateUpdateEventSoapRequest(calendarEvent);

            // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            Console.WriteLine($"üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:");
            if (!string.IsNullOrEmpty(calendarEvent.Location))
                Console.WriteLine($"  üìç –ú–µ—Å—Ç–æ: {calendarEvent.Location}");
            if (!string.IsNullOrEmpty(calendarEvent.Organizer))
                Console.WriteLine($"  üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {calendarEvent.Organizer}");
            if (calendarEvent.Attendees.Any())
                Console.WriteLine($"  üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {string.Join(", ", calendarEvent.Attendees)}");
            if (!string.IsNullOrEmpty(calendarEvent.Url))
                Console.WriteLine($"  üîó URL: {calendarEvent.Url}");

            var response = await SendSoapRequestAsync(soapRequest);

            if (response.Contains("Success"))
            {
                Console.WriteLine("‚úÖ –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");
                return true;
            }
            else
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {ExtractErrorFromResponse(response)}");
                return false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SOAP –∑–∞–ø—Ä–æ—Å
    /// </summary>
    public async Task<bool> DeleteCalendarEventAsync(string eventId)
    {
        try
        {
            Console.WriteLine($"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ SOAP: {eventId}");

            var soapRequest = CreateDeleteEventSoapRequest(eventId);
            var response = await SendSoapRequestAsync(soapRequest);

            if (response.Contains("Success"))
            {
                Console.WriteLine("‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");
                return true;
            }
            else
            {
                Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {ExtractErrorFromResponse(response)}");
                return false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SOAP –∑–∞–ø—Ä–æ—Å
    /// </summary>
    public async Task<string> CreateCalendarEventAsync(CalendarEvent calendarEvent)
    {
        var createdEvent = await CreateCalendarEventWithDetailsAsync(calendarEvent);
        return createdEvent.ExchangeId;
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –≤–µ—Ä–Ω—É—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤–∫–ª—é—á–∞—è ChangeKey
    /// </summary>
    public async Task<CalendarEvent> CreateCalendarEventWithDetailsAsync(CalendarEvent calendarEvent)
    {
        try
        {
            Console.WriteLine($"‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ SOAP: {calendarEvent.Summary}");

            // –°–æ–∑–¥–∞–µ–º SOAP –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            var soapRequest = CreateEventSoapRequest(calendarEvent);

            // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            Console.WriteLine($"üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å–æ–±—ã—Ç–∏—è:");
            if (!string.IsNullOrEmpty(calendarEvent.Location))
                Console.WriteLine($"  üìç –ú–µ—Å—Ç–æ: {calendarEvent.Location}");
            if (!string.IsNullOrEmpty(calendarEvent.Organizer))
                Console.WriteLine($"  üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {calendarEvent.Organizer}");
            if (calendarEvent.Attendees.Any())
                Console.WriteLine($"  üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {string.Join(", ", calendarEvent.Attendees)}");
            if (!string.IsNullOrEmpty(calendarEvent.Url))
                Console.WriteLine($"  üîó URL: {calendarEvent.Url}");

            Console.WriteLine("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ SOAP –∑–∞–ø—Ä–æ—Å–∞...");
            var response = await SendSoapRequestAsync(soapRequest);

            Console.WriteLine($"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Exchange ({response.Length} —Å–∏–º–≤–æ–ª–æ–≤)");

            // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏ ChangeKey —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
            var (eventId, changeKey) = ExtractEventIdAndChangeKeyFromResponse(response);

            if (!string.IsNullOrEmpty(eventId))
            {
                Console.WriteLine($"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {eventId}");

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
                calendarEvent.ExchangeId = eventId;
                calendarEvent.ExchangeChangeKey = changeKey;

                return calendarEvent;
            }
            else if (response.Contains("Success"))
            {
                Console.WriteLine("‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ");
                calendarEvent.ExchangeId = $"EXCHANGE_EVENT_{DateTime.Now:yyyyMMddHHmmss}";
                return calendarEvent;
            }
            else
            {
                Console.WriteLine("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:");
                Console.WriteLine($"üìù –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.Substring(0, Math.Min(1000, response.Length))}");
                throw new InvalidOperationException($"Exchange –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {ExtractErrorFromResponse(response)}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {ex.Message}");
            throw;
        }
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å SOAP –∑–∞–ø—Ä–æ—Å –∫ Exchange
    /// </summary>
    private async Task<string> SendSoapRequestAsync(string soapRequest)
    {
        var content = new StringContent(soapRequest, Encoding.UTF8, "text/xml");

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è SOAP
        content.Headers.Clear();
        content.Headers.Add("Content-Type", "text/xml; charset=utf-8");

        // –î–æ–±–∞–≤–ª—è–µ–º SOAPAction –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
        _httpClient.DefaultRequestHeaders.Remove("SOAPAction");
        _httpClient.DefaultRequestHeaders.Add("SOAPAction", "\"\"");

        Console.WriteLine($"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SOAP –∑–∞–ø—Ä–æ—Å ({soapRequest.Length} —Å–∏–º–≤–æ–ª–æ–≤)");

        var response = await _httpClient.PostAsync(_serviceUrl, content);
        var responseContent = await response.Content.ReadAsStringAsync();

        Console.WriteLine($"üì• –ü–æ–ª—É—á–µ–Ω HTTP —Å—Ç–∞—Ç—É—Å: {response.StatusCode}");
        Console.WriteLine($"üì• –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {responseContent.Length} —Å–∏–º–≤–æ–ª–æ–≤");

        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine($"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.StatusCode}");
            Console.WriteLine($"üìù –û—Ç–≤–µ—Ç: {responseContent}");
        }
        else if (responseContent.Contains("s:Fault") || responseContent.Contains("ErrorInvalidRequest"))
        {
            Console.WriteLine($"‚ö†Ô∏è  SOAP –æ—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ:");
            Console.WriteLine($"üìù –ü–µ—Ä–≤—ã–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤: {responseContent.Substring(0, Math.Min(1000, responseContent.Length))}");
        }

        return responseContent;
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å SOAP –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–∫–∏ (—Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
    /// </summary>
    private string CreateGetFolderSoapRequest()
    {
        return @"<?xml version=""1.0"" encoding=""utf-8""?>
<soap:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
               xmlns:xsd=""http://www.w3.org/2001/XMLSchema""
               xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""
               xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types"">
  <soap:Header>
    <t:RequestServerVersion Version=""Exchange2013_SP1"" />
  </soap:Header>
  <soap:Body>
    <GetFolder xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages""
               xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types"">
      <FolderShape>
        <t:BaseShape>Default</t:BaseShape>
      </FolderShape>
      <FolderIds>
        <t:DistinguishedFolderId Id=""inbox""/>
      </FolderIds>
    </GetFolder>
  </soap:Body>
</soap:Envelope>";
    }

    /// <summary>
    /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Exchange —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π
    /// </summary>
    private string FormatTimeForExchange(DateTime dateTime, string? timeZone)
    {
        // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –≤ UTC, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (dateTime.Kind == DateTimeKind.Utc)
        {
            return dateTime.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        var effectiveTimeZone = !string.IsNullOrEmpty(timeZone) ? timeZone : _defaultTimeZone;

        try
        {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–æ–Ω
            var systemTimeZoneId = ConvertIcsTimeZoneToSystem(effectiveTimeZone);
            var tz = TimeZoneInfo.FindSystemTimeZoneById(systemTimeZoneId);

            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏ —É–∂–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ
            var utcTime = TimeZoneInfo.ConvertTimeToUtc(dateTime, tz);

            Console.WriteLine($"üåç –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏: {dateTime:HH:mm:ss} ({effectiveTimeZone}) ‚Üí {utcTime:HH:mm:ss} UTC");

            return utcTime.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã '{effectiveTimeZone}': {ex.Message}");

            // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            try
            {
                var fallbackSystemTimeZoneId = ConvertIcsTimeZoneToSystem(_defaultTimeZone);
                var fallbackTz = TimeZoneInfo.FindSystemTimeZoneById(fallbackSystemTimeZoneId);
                var utcTime = TimeZoneInfo.ConvertTimeToUtc(dateTime, fallbackTz);

                Console.WriteLine($"üîÑ Fallback –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {dateTime:HH:mm:ss} ({_defaultTimeZone}) ‚Üí {utcTime:HH:mm:ss} UTC");

                return utcTime.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
            }
            catch
            {
                // –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback: —Å—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –ª–æ–∫–∞–ª—å–Ω—ã–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
                var utc = dateTime.ToUniversalTime();
                Console.WriteLine($"üîÑ –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è: {dateTime:HH:mm:ss} ‚Üí {utc:HH:mm:ss} UTC");
                return utc.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
            }
        }
    }

    /// <summary>
    /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ICS –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –≤ —Å–∏—Å—Ç–µ–º–Ω—É—é
    /// </summary>
    private string ConvertIcsTimeZoneToSystem(string icsTimeZone)
    {
        var mapping = icsTimeZone switch
        {
            "Europe/Moscow" => "Russian Standard Time",
            "UTC" => "UTC",
            "GMT" => "GMT Standard Time",
            "Europe/London" => "GMT Standard Time",
            "America/New_York" => "Eastern Standard Time",
            "America/Los_Angeles" => "Pacific Standard Time",
            "Europe/Berlin" => "W. Europe Standard Time",
            "Europe/Paris" => "W. Europe Standard Time",
            "Asia/Tokyo" => "Tokyo Standard Time",
            "Australia/Sydney" => "AUS Eastern Standard Time",
            _ => null // –ù–µ—Ç —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        };

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if (mapping != null)
        {
            return mapping;
        }

        // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        return ConvertIcsTimeZoneToSystem(_defaultTimeZone);
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å SOAP –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    /// </summary>
    private string CreateEventSoapRequest(CalendarEvent calendarEvent)
    {
        // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã
        var startTime = FormatTimeForExchange(calendarEvent.Start, calendarEvent.TimeZone);
        var endTime = FormatTimeForExchange(calendarEvent.End, calendarEvent.TimeZone);

        Console.WriteLine($"üïí –ò—Å—Ö–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è: {calendarEvent.Start:yyyy-MM-dd HH:mm:ss} (TimeZone: {calendarEvent.TimeZone ?? "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"})");
        Console.WriteLine($"üïí –í—Ä–µ–º—è –¥–ª—è Exchange: {startTime}");

        // –û—Å–Ω–æ–≤–Ω–æ–π SOAP –∑–∞–ø—Ä–æ—Å
        var soapRequest = $@"<?xml version=""1.0"" encoding=""utf-8""?>
<soap:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
               xmlns:xsd=""http://www.w3.org/2001/XMLSchema""
               xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""
               xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types""
               xmlns:m=""http://schemas.microsoft.com/exchange/services/2006/messages"">
  <soap:Header>
    <t:RequestServerVersion Version=""Exchange2010"" />
  </soap:Header>
  <soap:Body>
    <m:CreateItem SendMeetingInvitations=""SendToNone"">
      <m:Items>
        <t:CalendarItem>
          <t:Subject>{System.Security.SecurityElement.Escape(calendarEvent.Summary ?? "")}</t:Subject>
          <t:Body BodyType=""Text"">{System.Security.SecurityElement.Escape(calendarEvent.Description ?? "")}</t:Body>
          <t:Start>{startTime}</t:Start>
          <t:End>{endTime}</t:End>
          <t:Location>{System.Security.SecurityElement.Escape(calendarEvent.Location ?? "")}</t:Location>";

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
        if (!string.IsNullOrEmpty(calendarEvent.Organizer))
        {
            soapRequest += $@"
          <t:Organizer>
            <t:Mailbox>
              <t:EmailAddress>{System.Security.SecurityElement.Escape(calendarEvent.Organizer)}</t:EmailAddress>
            </t:Mailbox>
          </t:Organizer>";
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if (calendarEvent.Attendees.Any())
        {
            soapRequest += @"
          <t:RequiredAttendees>";
            foreach (var attendee in calendarEvent.Attendees)
            {
                soapRequest += $@"
            <t:Attendee>
              <t:Mailbox>
                <t:EmailAddress>{System.Security.SecurityElement.Escape(attendee)}</t:EmailAddress>
              </t:Mailbox>
            </t:Attendee>";
            }
            soapRequest += @"
          </t:RequiredAttendees>";
        }

        // –î–æ–±–∞–≤–ª—è–µ–º UID (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è)
        if (!string.IsNullOrEmpty(calendarEvent.Uid))
        {
            soapRequest += $@"
          <t:UID>{System.Security.SecurityElement.Escape(calendarEvent.Uid)}</t:UID>";
        }

        // –î–æ–±–∞–≤–ª—è–µ–º URL –∫–∞–∫ Extended Property (–Ω–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–ª—è –¥–ª—è URL –≤ Exchange)
        if (!string.IsNullOrEmpty(calendarEvent.Url))
        {
            soapRequest += $@"
          <t:ExtendedProperty>
            <t:ExtendedFieldURI PropertySetId=""C11FF724-AA03-4555-9952-8FA248A11C3E"" PropertyName=""EventUrl"" PropertyType=""String"" />
            <t:Value>{System.Security.SecurityElement.Escape(calendarEvent.Url)}</t:Value>
          </t:ExtendedProperty>";
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É CalSync (Extended Property –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞—à–∏—Ö —Å–æ–±—ã—Ç–∏–π)
        soapRequest += $@"
          <t:ExtendedProperty>
            <t:ExtendedFieldURI PropertySetId=""C11FF724-AA03-4555-9952-8FA248A11C3E"" PropertyName=""CalSync"" PropertyType=""String"" />
            <t:Value>true</t:Value>
          </t:ExtendedProperty>";

        soapRequest += @"
        </t:CalendarItem>
      </m:Items>
    </m:CreateItem>
  </soap:Body>
</soap:Envelope>";

        return soapRequest;
    }

    /// <summary>
    /// –ò–∑–≤–ª–µ—á—å ID —Å–æ–±—ã—Ç–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
    /// </summary>
    private string ExtractEventIdFromResponse(string response)
    {
        try
        {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º XmlReader –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID
            using (var stringReader = new System.IO.StringReader(response))
            using (var xmlReader = System.Xml.XmlReader.Create(stringReader))
            {
                while (xmlReader.Read())
                {
                    if (xmlReader.NodeType == System.Xml.XmlNodeType.Element && xmlReader.LocalName == "ItemId")
                    {
                        var id = xmlReader.GetAttribute("Id");
                        if (!string.IsNullOrEmpty(id))
                        {
                            return id;
                        }
                    }
                }
            }
        }
        catch
        {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —á–µ—Ä–µ–∑ XML, –ø–æ–ø—Ä–æ–±—É–µ–º regex
            var match = System.Text.RegularExpressions.Regex.Match(response, @"Id=""([^""]+)""");
            return match.Success ? match.Groups[1].Value : "";
        }

        return "";
    }

    /// <summary>
    /// –ò–∑–≤–ª–µ—á—å ID –∏ ChangeKey —Å–æ–±—ã—Ç–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
    /// </summary>
    private (string Id, string ChangeKey) ExtractEventIdAndChangeKeyFromResponse(string response)
    {
        try
        {
            using (var stringReader = new System.IO.StringReader(response))
            using (var xmlReader = System.Xml.XmlReader.Create(stringReader))
            {
                while (xmlReader.Read())
                {
                    if (xmlReader.NodeType == System.Xml.XmlNodeType.Element && xmlReader.LocalName == "ItemId")
                    {
                        var id = xmlReader.GetAttribute("Id");
                        var changeKey = xmlReader.GetAttribute("ChangeKey");
                        if (!string.IsNullOrEmpty(id))
                        {
                            return (id, changeKey ?? "");
                        }
                    }
                }
            }
        }
        catch
        {
            // Fallback
        }

        return ("", "");
    }

    /// <summary>
    /// –ò–∑–≤–ª–µ—á—å –æ—à–∏–±–∫—É –∏–∑ –æ—Ç–≤–µ—Ç–∞
    /// </summary>
    private string ExtractErrorFromResponse(string response)
    {
        try
        {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º XmlReader –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ—à–∏–±–∫–∏
            using (var stringReader = new System.IO.StringReader(response))
            using (var xmlReader = System.Xml.XmlReader.Create(stringReader))
            {
                while (xmlReader.Read())
                {
                    if (xmlReader.NodeType == System.Xml.XmlNodeType.Element &&
                        (xmlReader.LocalName == "MessageText" || xmlReader.LocalName == "faultstring"))
                    {
                        xmlReader.Read(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç–µ–∫—Å—Ç—É
                        if (xmlReader.NodeType == System.Xml.XmlNodeType.Text)
                        {
                            return xmlReader.Value;
                        }
                    }
                }
            }
        }
        catch
        {
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏";
        }

        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Exchange";
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å SOAP –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    /// </summary>
    private string CreateGetCalendarEventsSoapRequest(DateTime startDate, DateTime endDate)
    {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è CalendarView
        var startTimeUtc = startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
        var endTimeUtc = endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ");

        var soapRequest = $@"<?xml version=""1.0"" encoding=""utf-8""?>
<soap:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
               xmlns:xsd=""http://www.w3.org/2001/XMLSchema""
               xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""
               xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types"">
  <soap:Header>
    <t:RequestServerVersion Version=""Exchange2013_SP1"" />
  </soap:Header>
  <soap:Body>
    <FindItem xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages"" Traversal=""Shallow"">
      <ItemShape>
        <t:BaseShape>IdOnly</t:BaseShape>
        <t:AdditionalProperties>
          <t:FieldURI FieldURI=""item:Subject"" />
          <t:FieldURI FieldURI=""calendar:Start"" />
          <t:FieldURI FieldURI=""calendar:End"" />
          <t:FieldURI FieldURI=""item:Body"" />
          <t:FieldURI FieldURI=""calendar:Location"" />
          <t:FieldURI FieldURI=""calendar:Organizer"" />
          <t:FieldURI FieldURI=""calendar:RequiredAttendees"" />
          <t:FieldURI FieldURI=""calendar:UID"" />
          <t:ExtendedFieldURI PropertySetId=""C11FF724-AA03-4555-9952-8FA248A11C3E"" PropertyName=""CalSync"" PropertyType=""String"" />
          <t:ExtendedFieldURI PropertySetId=""C11FF724-AA03-4555-9952-8FA248A11C3E"" PropertyName=""EventUrl"" PropertyType=""String"" />
        </t:AdditionalProperties>
      </ItemShape>
      <CalendarView StartDate=""{startTimeUtc}"" EndDate=""{endTimeUtc}"" />
      <ParentFolderIds>
        <t:DistinguishedFolderId Id=""calendar"" />
      </ParentFolderIds>
    </FindItem>
  </soap:Body>
</soap:Envelope>";

        return soapRequest;
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å SOAP –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    /// </summary>
    private string CreateUpdateEventSoapRequest(CalendarEvent calendarEvent)
    {
        var startTimeUtc = FormatTimeForExchange(calendarEvent.Start, calendarEvent.TimeZone ?? "UTC");
        var endTimeUtc = FormatTimeForExchange(calendarEvent.End, calendarEvent.TimeZone ?? "UTC");

        var soapRequest = $@"<?xml version=""1.0"" encoding=""utf-8""?>
<soap:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
               xmlns:xsd=""http://www.w3.org/2001/XMLSchema""
               xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""
               xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types"">
  <soap:Header>
    <t:RequestServerVersion Version=""Exchange2013_SP1"" />
  </soap:Header>
  <soap:Body>
    <UpdateItem xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages"" MessageDisposition=""SaveOnly"" ConflictResolution=""AutoResolve"" SendMeetingInvitationsOrCancellations=""{_sendMeetingInvitations}"">
      <ItemChanges>
        <t:ItemChange>
          <t:ItemId Id=""{calendarEvent.ExchangeId}"" ChangeKey=""{calendarEvent.ExchangeChangeKey}"" />
          <t:Updates>
            <t:SetItemField>
              <t:FieldURI FieldURI=""item:Subject"" />
              <t:CalendarItem>
                <t:Subject>{System.Security.SecurityElement.Escape(calendarEvent.Summary)}</t:Subject>
              </t:CalendarItem>
            </t:SetItemField>
            <t:SetItemField>
              <t:FieldURI FieldURI=""calendar:Start"" />
              <t:CalendarItem>
                <t:Start>{startTimeUtc}</t:Start>
              </t:CalendarItem>
            </t:SetItemField>
            <t:SetItemField>
              <t:FieldURI FieldURI=""calendar:End"" />
              <t:CalendarItem>
                <t:End>{endTimeUtc}</t:End>
              </t:CalendarItem>
            </t:SetItemField>";

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        soapRequest += $@"
            <t:SetItemField>
              <t:FieldURI FieldURI=""item:Body"" />
              <t:CalendarItem>
                <t:Body BodyType=""Text"">{System.Security.SecurityElement.Escape(calendarEvent.Description ?? "")}</t:Body>
              </t:CalendarItem>
            </t:SetItemField>";

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        soapRequest += $@"
            <t:SetItemField>
              <t:FieldURI FieldURI=""calendar:Location"" />
              <t:CalendarItem>
                <t:Location>{System.Security.SecurityElement.Escape(calendarEvent.Location ?? "")}</t:Location>
              </t:CalendarItem>
            </t:SetItemField>";

        // –û–±–Ω–æ–≤–ª—è–µ–º UID (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–ª–µ)
        if (!string.IsNullOrEmpty(calendarEvent.Uid))
        {
            soapRequest += $@"
            <t:SetItemField>
              <t:FieldURI FieldURI=""calendar:UID"" />
              <t:CalendarItem>
                <t:UID>{System.Security.SecurityElement.Escape(calendarEvent.Uid)}</t:UID>
              </t:CalendarItem>
            </t:SetItemField>";
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º URL –∫–∞–∫ Extended Property
        if (!string.IsNullOrEmpty(calendarEvent.Url))
        {
            soapRequest += $@"
            <t:SetItemField>
              <t:ExtendedFieldURI PropertySetId=""C11FF724-AA03-4555-9952-8FA248A11C3E"" PropertyName=""EventUrl"" PropertyType=""String"" />
              <t:CalendarItem>
                <t:ExtendedProperty>
                  <t:ExtendedFieldURI PropertySetId=""C11FF724-AA03-4555-9952-8FA248A11C3E"" PropertyName=""EventUrl"" PropertyType=""String"" />
                  <t:Value>{System.Security.SecurityElement.Escape(calendarEvent.Url)}</t:Value>
                </t:ExtendedProperty>
              </t:CalendarItem>
            </t:SetItemField>";
        }

        soapRequest += @"
          </t:Updates>
        </t:ItemChange>
      </ItemChanges>
    </UpdateItem>
  </soap:Body>
</soap:Envelope>";

        return soapRequest;
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å SOAP –∑–∞–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    /// </summary>
    private string CreateDeleteEventSoapRequest(string eventId)
    {
        var soapRequest = $@"<?xml version=""1.0"" encoding=""utf-8""?>
<soap:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
               xmlns:xsd=""http://www.w3.org/2001/XMLSchema""
               xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""
               xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types"">
  <soap:Header>
    <t:RequestServerVersion Version=""Exchange2013_SP1"" />
  </soap:Header>
  <soap:Body>
    <DeleteItem xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages"" DeleteType=""HardDelete"" SendMeetingCancellations=""{_sendMeetingCancellations}"">
      <ItemIds>
        <t:ItemId Id=""{eventId}"" />
      </ItemIds>
    </DeleteItem>
  </soap:Body>
</soap:Envelope>";

        return soapRequest;
    }

    /// <summary>
    /// –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π –∏–∑ SOAP –æ—Ç–≤–µ—Ç–∞
    /// </summary>
    private List<CalendarEvent> ParseCalendarEventsFromResponse(string response)
    {
        var events = new List<CalendarEvent>();

        try
        {
            Console.WriteLine($"üîç –ü–∞—Ä—Å–∏–Ω–≥ XML –æ—Ç–≤–µ—Ç–∞ ({response.Length} —Å–∏–º–≤–æ–ª–æ–≤)");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ
            if (response.Contains("ErrorInvalidRequest") || response.Contains("s:Fault"))
            {
                Console.WriteLine("‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ Exchange");
                return events;
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º System.Xml –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
            using (var stringReader = new System.IO.StringReader(response))
            using (var xmlReader = System.Xml.XmlReader.Create(stringReader))
            {
                CalendarEvent currentEvent = null;
                string currentElementName = "";
                bool inExtendedProperty = false;
                bool isCalSyncProperty = false;
                bool isEventUrlProperty = false;

                while (xmlReader.Read())
                {
                    switch (xmlReader.NodeType)
                    {
                        case System.Xml.XmlNodeType.Element:
                            currentElementName = xmlReader.LocalName;

                            if (currentElementName == "CalendarItem")
                            {
                                currentEvent = new CalendarEvent();
                            }
                            else if (currentElementName == "ItemId" && currentEvent != null)
                            {
                                currentEvent.ExchangeId = xmlReader.GetAttribute("Id");
                                currentEvent.ExchangeChangeKey = xmlReader.GetAttribute("ChangeKey");
                            }
                            else if (currentElementName == "ExtendedProperty")
                            {
                                inExtendedProperty = true;
                                isCalSyncProperty = false;
                                isEventUrlProperty = false;
                            }
                            else if (currentElementName == "ExtendedFieldURI" && inExtendedProperty)
                            {
                                var propertyName = xmlReader.GetAttribute("PropertyName");
                                if (propertyName == "CalSync")
                                {
                                    isCalSyncProperty = true;
                                }
                                else if (propertyName == "EventUrl")
                                {
                                    isEventUrlProperty = true;
                                    isCalSyncProperty = false;
                                }
                            }
                            break;

                        case System.Xml.XmlNodeType.Text:
                            if (currentEvent != null)
                            {
                                if (inExtendedProperty && currentElementName == "Value")
                                {
                                    if (isCalSyncProperty)
                                    {
                                        // –ù–∞—à–ª–∏ –º–µ—Ç–∫—É CalSync - —ç—Ç–æ –Ω–∞—à–µ —Å–æ–±—ã—Ç–∏–µ
                                        currentEvent.IsCalSyncEvent = true;
                                        Console.WriteLine($"üè∑Ô∏è –ù–∞–π–¥–µ–Ω–∞ –º–µ—Ç–∫–∞ CalSync –≤ —Å–æ–±—ã—Ç–∏–∏");
                                    }
                                    else if (isEventUrlProperty)
                                    {
                                        // –ù–∞—à–ª–∏ URL —Å–æ–±—ã—Ç–∏—è
                                        currentEvent.Url = xmlReader.Value;
                                        Console.WriteLine($"üîó –ù–∞–π–¥–µ–Ω URL –≤ —Å–æ–±—ã—Ç–∏–∏: {xmlReader.Value}");
                                    }
                                }
                                else
                                {
                                    switch (currentElementName)
                                    {
                                        case "Subject":
                                            currentEvent.Summary = xmlReader.Value;
                                            break;
                                        case "Start":
                                            if (DateTime.TryParse(xmlReader.Value, out var startTime))
                                            {
                                                currentEvent.Start = startTime;
                                            }
                                            break;
                                        case "End":
                                            if (DateTime.TryParse(xmlReader.Value, out var endTime))
                                            {
                                                currentEvent.End = endTime;
                                            }
                                            break;
                                        case "Body":
                                            currentEvent.Description = xmlReader.Value;
                                            break;
                                        case "UID":
                                            currentEvent.Uid = xmlReader.Value;
                                            Console.WriteLine($"üîç –ù–∞–π–¥–µ–Ω UID –≤ Exchange —Å–æ–±—ã—Ç–∏—è: {xmlReader.Value}");
                                            break;
                                        case "Location":
                                            currentEvent.Location = xmlReader.Value;
                                            break;
                                    }
                                }
                            }
                            break;

                        case System.Xml.XmlNodeType.EndElement:
                            if (xmlReader.LocalName == "ExtendedProperty")
                            {
                                inExtendedProperty = false;
                                isCalSyncProperty = false;
                                isEventUrlProperty = false;
                            }
                            else if (xmlReader.LocalName == "CalendarItem" && currentEvent != null)
                            {
                                if (!string.IsNullOrEmpty(currentEvent.ExchangeId))
                                {
                                    events.Add(currentEvent);
                                    Console.WriteLine($"‚úÖ –°–æ–±—ã—Ç–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {currentEvent.Summary} ({currentEvent.ExchangeId?.Substring(0, 20)}...) [CalSync: {currentEvent.IsCalSyncEvent}]");
                                }
                                currentEvent = null;
                            }
                            break;
                    }
                }
            }

            Console.WriteLine($"üìä –í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ: {events.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π: {ex.Message}");
            Console.WriteLine($"üìù –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞: {response.Substring(0, Math.Min(500, response.Length))}...");
        }

        return events;
    }

    public void Dispose()
    {
        if (!_disposed)
        {
            _httpClient?.Dispose();
            _disposed = true;
            Console.WriteLine("üîÑ Exchange HTTP Service disposed");
        }
    }
}