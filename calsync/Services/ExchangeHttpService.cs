using CalSync.Models;
using Microsoft.Extensions.Configuration;
using System.Net.Http;
using System.Text;
using System.Xml;

namespace CalSync.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä—è–º–æ–≥–æ HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Exchange Web Services —á–µ—Ä–µ–∑ SOAP
/// –û–±—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—ã Microsoft.Exchange.WebServices —Å .NET 8
/// </summary>
public class ExchangeHttpService : IDisposable
{
    private readonly HttpClient _httpClient;
    private readonly IConfiguration _configuration;
    private readonly string _serviceUrl;
    private readonly string _domain;
    private readonly string _username;
    private readonly string _password;
    private bool _disposed = false;

    public ExchangeHttpService(IConfiguration configuration)
    {
        _configuration = configuration;
        var exchangeConfig = _configuration.GetSection("Exchange");

        _serviceUrl = exchangeConfig["ServiceUrl"] ?? throw new ArgumentException("ServiceUrl –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
        _domain = exchangeConfig["Domain"] ?? "";
        _username = exchangeConfig["Username"] ?? throw new ArgumentException("Username –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
        _password = exchangeConfig["Password"] ?? throw new ArgumentException("Password –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç
        var handler = new HttpClientHandler();

        // –û—Ç–∫–ª—é—á–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é SSL –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
        var validateSsl = exchangeConfig["ValidateSslCertificate"]?.ToLower() != "false";
        if (!validateSsl)
        {
            handler.ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => true;
            Console.WriteLine("‚ö†Ô∏è  SSL –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞");
        }

        _httpClient = new HttpClient(handler);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
        var credentials = !string.IsNullOrEmpty(_domain) ?
            $"{_domain}\\{_username}" : _username;

        var authValue = Convert.ToBase64String(Encoding.ASCII.GetBytes($"{credentials}:{_password}"));
        _httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic", authValue);

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
        if (int.TryParse(exchangeConfig["RequestTimeout"], out var timeout) && timeout > 0)
        {
            _httpClient.Timeout = TimeSpan.FromMilliseconds(timeout);
        }

        Console.WriteLine($"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Exchange HTTP Service");
        Console.WriteLine($"üåê URL: {_serviceUrl}");
        Console.WriteLine($"üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {credentials}");
    }

    /// <summary>
    /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Exchange
    /// </summary>
    public async Task<bool> TestConnectionAsync()
    {
        try
        {
            Console.WriteLine("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Exchange...");

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π SOAP –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–∫–∏ Inbox
            var soapRequest = CreateGetFolderSoapRequest();
            var response = await SendSoapRequestAsync(soapRequest);

            if (response.Contains("Success"))
            {
                Console.WriteLine("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Exchange —É—Å–ø–µ—à–Ω–æ!");
                return true;
            }
            else if (response.Contains("Unauthorized"))
            {
                Console.WriteLine("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Exchange");
                return false;
            }
            else
            {
                Console.WriteLine("‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Exchange, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏...");
                Console.WriteLine($"üìù –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞: {response.Substring(0, Math.Min(500, response.Length))}");
                return true; // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º, –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –ª—é–±–æ–π –æ—Ç–≤–µ—Ç
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SOAP –∑–∞–ø—Ä–æ—Å
    /// </summary>
    public async Task<string> CreateCalendarEventAsync(CalendarEvent calendarEvent)
    {
        try
        {
            Console.WriteLine($"‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ SOAP: {calendarEvent.Summary}");

            // –°–æ–∑–¥–∞–µ–º SOAP –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            var soapRequest = CreateEventSoapRequest(calendarEvent);

            Console.WriteLine("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ SOAP –∑–∞–ø—Ä–æ—Å–∞...");
            var response = await SendSoapRequestAsync(soapRequest);

            Console.WriteLine($"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Exchange ({response.Length} —Å–∏–º–≤–æ–ª–æ–≤)");

            // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
            var eventId = ExtractEventIdFromResponse(response);

            if (!string.IsNullOrEmpty(eventId))
            {
                Console.WriteLine($"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {eventId}");
                return eventId;
            }
            else if (response.Contains("Success"))
            {
                Console.WriteLine("‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ");
                return $"EXCHANGE_EVENT_{DateTime.Now:yyyyMMddHHmmss}";
            }
            else
            {
                Console.WriteLine("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è:");
                Console.WriteLine($"üìù –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.Substring(0, Math.Min(1000, response.Length))}");
                throw new InvalidOperationException($"Exchange –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {ExtractErrorFromResponse(response)}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {ex.Message}");
            throw;
        }
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å SOAP –∑–∞–ø—Ä–æ—Å –∫ Exchange
    /// </summary>
    private async Task<string> SendSoapRequestAsync(string soapRequest)
    {
        var content = new StringContent(soapRequest, Encoding.UTF8, "text/xml");

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è SOAP
        content.Headers.Clear();
        content.Headers.Add("Content-Type", "text/xml; charset=utf-8");

        var response = await _httpClient.PostAsync(_serviceUrl, content);
        var responseContent = await response.Content.ReadAsStringAsync();

        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine($"‚ùå HTTP –æ—à–∏–±–∫–∞: {response.StatusCode}");
            Console.WriteLine($"üìù –û—Ç–≤–µ—Ç: {responseContent}");
        }

        return responseContent;
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å SOAP –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–ø–∫–∏ (—Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
    /// </summary>
    private string CreateGetFolderSoapRequest()
    {
        return @"<?xml version=""1.0"" encoding=""utf-8""?>
<soap:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
               xmlns:xsd=""http://www.w3.org/2001/XMLSchema""
               xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""
               xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types"">
  <soap:Header>
    <t:RequestServerVersion Version=""Exchange2013_SP1"" />
  </soap:Header>
  <soap:Body>
    <GetFolder xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages""
               xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types"">
      <FolderShape>
        <t:BaseShape>Default</t:BaseShape>
      </FolderShape>
      <FolderIds>
        <t:DistinguishedFolderId Id=""inbox""/>
      </FolderIds>
    </GetFolder>
  </soap:Body>
</soap:Envelope>";
    }

    /// <summary>
    /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Exchange —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–æ–π
    /// </summary>
    private string FormatTimeForExchange(DateTime dateTime, string? timeZone)
    {
        // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –≤ UTC, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (dateTime.Kind == DateTimeKind.Utc)
        {
            return dateTime.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
        }

        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–µ
        if (!string.IsNullOrEmpty(timeZone))
        {
            try
            {
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–æ–Ω
                var systemTimeZoneId = ConvertIcsTimeZoneToSystem(timeZone);
                var tz = TimeZoneInfo.FindSystemTimeZoneById(systemTimeZoneId);

                // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏ —É–∂–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ
                var utcTime = TimeZoneInfo.ConvertTimeToUtc(dateTime, tz);

                Console.WriteLine($"üåç –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏: {dateTime:HH:mm:ss} ({timeZone}) ‚Üí {utcTime:HH:mm:ss} UTC");

                return utcTime.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã '{timeZone}': {ex.Message}");
                // Fallback: –¥–æ–±–∞–≤–ª—è–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (UTC+3)
                var moscowTime = dateTime.AddHours(-3);
                return moscowTime.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
            }
        }

        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –≤—Ä–µ–º—è –ª–æ–∫–∞–ª—å–Ω—ã–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC
        var utc = dateTime.ToUniversalTime();
        return utc.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
    }

    /// <summary>
    /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å ICS –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –≤ —Å–∏—Å—Ç–µ–º–Ω—É—é
    /// </summary>
    private string ConvertIcsTimeZoneToSystem(string icsTimeZone)
    {
        return icsTimeZone switch
        {
            "Europe/Moscow" => "Russian Standard Time",
            "UTC" => "UTC",
            "GMT" => "GMT Standard Time",
            "Europe/London" => "GMT Standard Time",
            "America/New_York" => "Eastern Standard Time",
            "America/Los_Angeles" => "Pacific Standard Time",
            _ => "Russian Standard Time" // Fallback –¥–ª—è –Ω–∞—à–µ–≥–æ —Å–ª—É—á–∞—è
        };
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å SOAP –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    /// </summary>
    private string CreateEventSoapRequest(CalendarEvent calendarEvent)
    {
        // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã
        var startTime = FormatTimeForExchange(calendarEvent.Start, calendarEvent.TimeZone);
        var endTime = FormatTimeForExchange(calendarEvent.End, calendarEvent.TimeZone);

        Console.WriteLine($"üïí –ò—Å—Ö–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è: {calendarEvent.Start:yyyy-MM-dd HH:mm:ss} (TimeZone: {calendarEvent.TimeZone ?? "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"})");
        Console.WriteLine($"üïí –í—Ä–µ–º—è –¥–ª—è Exchange: {startTime}");

        return $@"<?xml version=""1.0"" encoding=""utf-8""?>
<soap:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""
               xmlns:xsd=""http://www.w3.org/2001/XMLSchema""
               xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/""
               xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types"">
  <soap:Header>
    <t:RequestServerVersion Version=""Exchange2013_SP1"" />
  </soap:Header>
  <soap:Body>
    <CreateItem xmlns=""http://schemas.microsoft.com/exchange/services/2006/messages"" 
                MessageDisposition=""SaveOnly"" 
                SendMeetingInvitations=""SendToNone"">
      <SavedItemFolderId>
        <t:DistinguishedFolderId Id=""calendar""/>
      </SavedItemFolderId>
      <Items>
        <t:CalendarItem>
          <t:Subject>{System.Security.SecurityElement.Escape(calendarEvent.Summary)}</t:Subject>
          <t:Body BodyType=""Text"">{System.Security.SecurityElement.Escape(calendarEvent.Description ?? "")}</t:Body>
          <t:Start>{startTime}</t:Start>
          <t:End>{endTime}</t:End>
          <t:Location>{System.Security.SecurityElement.Escape(calendarEvent.Location ?? "")}</t:Location>
          <t:LegacyFreeBusyStatus>Busy</t:LegacyFreeBusyStatus>
        </t:CalendarItem>
      </Items>
    </CreateItem>
  </soap:Body>
</soap:Envelope>";
    }

    /// <summary>
    /// –ò–∑–≤–ª–µ—á—å ID —Å–æ–±—ã—Ç–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞
    /// </summary>
    private string ExtractEventIdFromResponse(string response)
    {
        try
        {
            var doc = new XmlDocument();
            doc.LoadXml(response);

            var namespaceManager = new XmlNamespaceManager(doc.NameTable);
            namespaceManager.AddNamespace("t", "http://schemas.microsoft.com/exchange/services/2006/types");
            namespaceManager.AddNamespace("m", "http://schemas.microsoft.com/exchange/services/2006/messages");

            var itemIdNode = doc.SelectSingleNode("//t:ItemId", namespaceManager);

            return itemIdNode?.Attributes?["Id"]?.Value ?? "";
        }
        catch
        {
            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —á–µ—Ä–µ–∑ XML, –ø–æ–ø—Ä–æ–±—É–µ–º regex
            var match = System.Text.RegularExpressions.Regex.Match(response, @"Id=""([^""]+)""");
            return match.Success ? match.Groups[1].Value : "";
        }
    }

    /// <summary>
    /// –ò–∑–≤–ª–µ—á—å –æ—à–∏–±–∫—É –∏–∑ –æ—Ç–≤–µ—Ç–∞
    /// </summary>
    private string ExtractErrorFromResponse(string response)
    {
        try
        {
            var doc = new XmlDocument();
            doc.LoadXml(response);

            var namespaceManager = new XmlNamespaceManager(doc.NameTable);
            namespaceManager.AddNamespace("m", "http://schemas.microsoft.com/exchange/services/2006/messages");

            var errorNode = doc.SelectSingleNode("//m:MessageText", namespaceManager);

            return errorNode?.InnerText ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Exchange";
        }
        catch
        {
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏";
        }
    }

    public void Dispose()
    {
        if (!_disposed)
        {
            _httpClient?.Dispose();
            _disposed = true;
            Console.WriteLine("üîÑ Exchange HTTP Service disposed");
        }
    }
}