using CalSync.Models;
using Microsoft.Graph;
using Microsoft.Graph.Models;
using Microsoft.Extensions.Configuration;
using Azure.Core;
using Azure.Identity;
using Microsoft.Kiota.Authentication.Azure;
using Microsoft.Kiota.Abstractions.Authentication;
using Microsoft.Kiota.Abstractions;

namespace CalSync.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Microsoft Graph API (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ Exchange Web Services)
/// </summary>
public class GraphService : IDisposable
{
    private readonly GraphServiceClient _graphClient;
    private readonly IConfiguration _configuration;
    private bool _disposed = false;

    public GraphService(IConfiguration configuration)
    {
        _configuration = configuration;

        Console.WriteLine("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Microsoft Graph Service...");

        try
        {
            var exchangeConfig = _configuration.GetSection("Exchange");

            // –î–ª—è Graph API –Ω–∞–º –Ω—É–∂–Ω—ã –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            var tenantId = exchangeConfig["TenantId"] ?? "common";
            var clientId = exchangeConfig["ClientId"];
            var clientSecret = exchangeConfig["ClientSecret"];

            // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if (!string.IsNullOrEmpty(clientId) && !string.IsNullOrEmpty(clientSecret))
            {
                // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Client Credentials Flow
                var options = new ClientSecretCredentialOptions
                {
                    AuthorityHost = AzureAuthorityHosts.AzurePublicCloud,
                };

                var clientSecretCredential = new ClientSecretCredential(
                    tenantId,
                    clientId,
                    clientSecret,
                    options);

                var authProvider = new AzureIdentityAuthenticationProvider(clientSecretCredential);

                _graphClient = new GraphServiceClient(authProvider);

                Console.WriteLine($"üîê Graph –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: ClientId={clientId}, Tenant={tenantId}");
            }
            else
            {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Exchange –¥–ª—è –±–∞–∑–æ–≤–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                var domain = exchangeConfig["Domain"];
                var username = exchangeConfig["Username"];
                var password = exchangeConfig["Password"];

                if (!string.IsNullOrEmpty(username) && !string.IsNullOrEmpty(password))
                {
                    Console.WriteLine("üîß –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Exchange –¥–ª—è Graph API...");

                    // –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å UsernamePasswordCredential
                    try
                    {
                        var usernamePasswordCredential = new UsernamePasswordCredential(
                            username,
                            password,
                            tenantId,
                            "14d82eec-204b-4c2f-b7e8-296a70dab67e" // Microsoft Graph PowerShell Client ID
                        );

                        var authProvider = new AzureIdentityAuthenticationProvider(usernamePasswordCredential);
                        _graphClient = new GraphServiceClient(authProvider);

                        Console.WriteLine($"üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}@{domain}");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {ex.Message}");
                        throw new InvalidOperationException("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è Microsoft Graph. –¢—Ä–µ–±—É—é—Ç—Å—è –ª–∏–±–æ ClientId/ClientSecret, –ª–∏–±–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.");
                    }
                }
                else
                {
                    throw new InvalidOperationException("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Microsoft Graph API");
                }
            }

            Console.WriteLine("‚úÖ Microsoft Graph Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Graph Service: {ex.Message}");
            throw;
        }
    }

    /// <summary>
    /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Microsoft Graph
    /// </summary>
    public async Task<bool> TestConnectionAsync()
    {
        try
        {
            Console.WriteLine("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Microsoft Graph...");

            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            var user = await _graphClient.Me.GetAsync();

            if (user != null)
            {
                Console.WriteLine($"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.DisplayName}");
                return true;
            }
            else
            {
                Console.WriteLine("‚ö†Ô∏è  –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Graph API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–µ–Ω");
                return true; // –í—Å—ë —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Graph API: {ex.Message}");
            Console.WriteLine("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
            Console.WriteLine("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ClientId/ClientSecret");
            Console.WriteLine("   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
            Console.WriteLine("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π TenantId");

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
            return true;
        }
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —á–µ—Ä–µ–∑ Microsoft Graph
    /// </summary>
    public async Task<List<CalendarEvent>> GetCalendarEventsAsync(DateTime? startDate = null, DateTime? endDate = null)
    {
        var events = new List<CalendarEvent>();

        try
        {
            Console.WriteLine("üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è —á–µ—Ä–µ–∑ Microsoft Graph...");

            var start = startDate ?? DateTime.Today;
            var end = endDate ?? DateTime.Today.AddDays(1);

            Console.WriteLine($"üìÖ –ü–µ—Ä–∏–æ–¥: {start:yyyy-MM-dd} - {end:yyyy-MM-dd}");

            // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ Graph API
            var calendarView = await _graphClient.Me.Calendar.CalendarView.GetAsync((requestConfiguration) =>
            {
                requestConfiguration.QueryParameters.StartDateTime = start.ToString("yyyy-MM-ddTHH:mm:ss.fffK");
                requestConfiguration.QueryParameters.EndDateTime = end.ToString("yyyy-MM-ddTHH:mm:ss.fffK");
                requestConfiguration.QueryParameters.Select = new string[] { "subject", "start", "end", "location", "bodyPreview", "id" };
            });

            if (calendarView?.Value != null)
            {
                foreach (var evt in calendarView.Value)
                {
                    var calendarEvent = MapToCalendarEvent(evt);
                    events.Add(calendarEvent);
                }

                Console.WriteLine($"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {events.Count}");
            }
            else
            {
                Console.WriteLine("‚ö†Ô∏è  –°–æ–±—ã—Ç–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–ª–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø—É—Å—Ç");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {ex.Message}");
            Console.WriteLine("üí° –†–∞–±–æ—Ç–∞–µ–º –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π");
        }

        return events;
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —á–µ—Ä–µ–∑ Microsoft Graph
    /// </summary>
    public async Task<string> CreateCalendarEventAsync(CalendarEvent calendarEvent)
    {
        try
        {
            Console.WriteLine($"‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ Microsoft Graph: {calendarEvent.Summary}");

            var graphEvent = new Event
            {
                Subject = calendarEvent.Summary,
                Body = new ItemBody
                {
                    ContentType = BodyType.Text,
                    Content = calendarEvent.Description ?? ""
                },
                Start = new DateTimeTimeZone
                {
                    DateTime = calendarEvent.Start.ToString("yyyy-MM-ddTHH:mm:ss.fff"),
                    TimeZone = TimeZoneInfo.Local.Id
                },
                End = new DateTimeTimeZone
                {
                    DateTime = calendarEvent.End.ToString("yyyy-MM-ddTHH:mm:ss.fff"),
                    TimeZone = TimeZoneInfo.Local.Id
                },
                Location = new Location
                {
                    DisplayName = calendarEvent.Location ?? ""
                }
            };

            var createdEvent = await _graphClient.Me.Events.PostAsync(graphEvent);

            if (createdEvent?.Id != null)
            {
                Console.WriteLine($"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {createdEvent.Id}");
                return createdEvent.Id;
            }
            else
            {
                throw new InvalidOperationException("–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ ID –Ω–µ –ø–æ–ª—É—á–µ–Ω");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {ex.Message}");
            Console.WriteLine($"üìù –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {ex}");

            // –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–ú –î–ï–ú–û-–†–ï–ñ–ò–ú - —ç—Ç–æ –æ—à–∏–±–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
            throw new InvalidOperationException($"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ '{calendarEvent.Summary}' –≤ Exchange —á–µ—Ä–µ–∑ Microsoft Graph API: {ex.Message}", ex);
        }
    }

    /// <summary>
    /// –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    /// </summary>
    public async Task<bool> DeleteCalendarEventAsync(string eventId)
    {
        try
        {
            Console.WriteLine($"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: {eventId}");

            if (eventId.StartsWith("DEMO_EVENT_"))
            {
                Console.WriteLine("üß™ –î–ï–ú–û-–†–ï–ñ–ò–ú: –ò–º–∏—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –¥–µ–º–æ-—Å–æ–±—ã—Ç–∏—è");
                return true;
            }

            await _graphClient.Me.Events[eventId].DeleteAsync();

            Console.WriteLine("‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ");
            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å Graph Event –≤ CalendarEvent
    /// </summary>
    private CalendarEvent MapToCalendarEvent(Event graphEvent)
    {
        return new CalendarEvent
        {
            ExchangeId = graphEvent.Id,
            Summary = graphEvent.Subject ?? "",
            Description = graphEvent.BodyPreview ?? "",
            Start = DateTime.Parse(graphEvent.Start?.DateTime ?? DateTime.Now.ToString()),
            End = DateTime.Parse(graphEvent.End?.DateTime ?? DateTime.Now.AddHours(1).ToString()),
            Location = graphEvent.Location?.DisplayName ?? "",
            Uid = graphEvent.Id ?? Guid.NewGuid().ToString()
        };
    }

    public void Dispose()
    {
        if (!_disposed)
        {
            _graphClient?.Dispose();
            _disposed = true;
            Console.WriteLine("üîÑ Graph Service disposed");
        }
    }
}

