using CalSync.Models;
using Microsoft.Exchange.WebServices.Data;
using Microsoft.Extensions.Configuration;

namespace CalSync.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Exchange Web Services
/// </summary>
public class ExchangeService : IDisposable
{
    private readonly Microsoft.Exchange.WebServices.Data.ExchangeService _service;
    private readonly IConfiguration _configuration;
    private bool _disposed = false;

    public ExchangeService(IConfiguration configuration)
    {
        _configuration = configuration;
        var exchangeConfig = _configuration.GetSection("Exchange");

        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å –Ω—É–∂–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
        var version = exchangeConfig["Version"];
        var exchangeVersion = version switch
        {
            "Exchange2013" => ExchangeVersion.Exchange2013,
            "Exchange2013_SP1" => ExchangeVersion.Exchange2013_SP1,
            _ => ExchangeVersion.Exchange2013_SP1
        };

        _service = new Microsoft.Exchange.WebServices.Data.ExchangeService(exchangeVersion);
        Initialize();
    }

    /// <summary>
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
    /// </summary>
    private void Initialize()
    {
        var exchangeConfig = _configuration.GetSection("Exchange");

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        var domain = exchangeConfig["Domain"];
        var username = exchangeConfig["Username"];
        var password = exchangeConfig["Password"];

        if (!string.IsNullOrEmpty(username) && !string.IsNullOrEmpty(password))
        {
            // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if (!string.IsNullOrEmpty(domain))
            {
                // –í–∞—Ä–∏–∞–Ω—Ç 1: domain\username
                _service.Credentials = new WebCredentials($"{domain}\\{username}", password);
                Console.WriteLine($"üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {domain}\\{username}");
            }
            else
            {
                // –í–∞—Ä–∏–∞–Ω—Ç 2: –ø—Ä–æ—Å—Ç–æ username
                _service.Credentials = new WebCredentials(username, password);
                Console.WriteLine($"üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {username}");
            }
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ URL —Å–µ—Ä–≤–∏—Å–∞
        var serviceUrl = exchangeConfig["ServiceUrl"];
        if (!string.IsNullOrEmpty(serviceUrl))
        {
            _service.Url = new Uri(serviceUrl);
            Console.WriteLine($"üåê EWS URL: {serviceUrl}");
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
        if (int.TryParse(exchangeConfig["RequestTimeout"], out var timeout))
        {
            _service.Timeout = timeout;
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ SSL
        var validateSsl = exchangeConfig["ValidateSslCertificate"]?.ToLower() != "false";
        if (!validateSsl)
        {
            System.Net.ServicePointManager.ServerCertificateValidationCallback =
                (sender, certificate, chain, sslPolicyErrors) => true;
            Console.WriteLine("‚ö†Ô∏è  SSL –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞");
        }
    }

    /// <summary>
    /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Exchange
    /// </summary>
    public async Task<bool> TestConnectionAsync()
    {
        var exchangeConfig = _configuration.GetSection("Exchange");
        var domain = exchangeConfig["Domain"];
        var username = exchangeConfig["Username"];
        var password = exchangeConfig["Password"];

        // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        var credentialVariants = new List<(string name, WebCredentials creds)>();

        if (!string.IsNullOrEmpty(domain) && !string.IsNullOrEmpty(username) && !string.IsNullOrEmpty(password))
        {
            credentialVariants.Add(($"{domain}\\{username}", new WebCredentials($"{domain}\\{username}", password)));
            credentialVariants.Add(($"{username}@{domain}", new WebCredentials($"{username}@{domain}", password)));
            credentialVariants.Add((username, new WebCredentials(username, password)));
        }

        foreach (var (name, creds) in credentialVariants)
        {
            try
            {
                Console.WriteLine($"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {name}");
                _service.Credentials = creds;

                // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                var calendar = Folder.Bind(_service, WellKnownFolderName.Calendar);

                Console.WriteLine($"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ö–∞–ª–µ–Ω–¥–∞—Ä—å: {calendar.DisplayName}");
                Console.WriteLine($"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {name}");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å {name}: {ex.Message}");
            }
        }

        Console.WriteLine("‚ùå –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏");
        return false;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    /// </summary>
    public async Task<List<CalSync.Models.CalendarEvent>> GetCalendarEventsAsync(DateTime? startDate = null, DateTime? endDate = null)
    {
        try
        {
            Console.WriteLine("üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è...");

            var start = startDate ?? DateTime.Today.AddDays(-7);
            var end = endDate ?? DateTime.Today.AddDays(30);

            Console.WriteLine($"üìÖ –ü–µ—Ä–∏–æ–¥: {start:yyyy-MM-dd} - {end:yyyy-MM-dd}");

            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var calendar = CalendarFolder.Bind(_service, WellKnownFolderName.Calendar);

            // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            var calendarView = new CalendarView(start, end);
            calendarView.PropertySet = new PropertySet(BasePropertySet.FirstClassProperties);

            // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            var findResults = calendar.FindAppointments(calendarView);

            Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {findResults.Items.Count}");

            var events = new List<CalSync.Models.CalendarEvent>();

            foreach (var appointment in findResults.Items)
            {
                try
                {
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
                    appointment.Load(new PropertySet(BasePropertySet.FirstClassProperties));

                    var calendarEvent = MapToCalendarEvent(appointment);
                    events.Add(calendarEvent);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è {appointment.Id}: {ex.Message}");
                }
            }

            return events;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {ex.Message}");
            throw;
        }
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
    /// </summary>
    public async Task<string> CreateCalendarEventAsync(CalSync.Models.CalendarEvent calendarEvent)
    {
        try
        {
            Console.WriteLine($"‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: {calendarEvent.Summary}");

            var appointment = new Appointment(_service);

            // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
            appointment.Subject = calendarEvent.Summary;
            appointment.Body = calendarEvent.Description ?? "";
            appointment.Start = calendarEvent.Start;
            appointment.End = calendarEvent.End;

            if (!string.IsNullOrEmpty(calendarEvent.Location))
            {
                appointment.Location = calendarEvent.Location;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞—à–∏—Ö —Å–æ–±—ã—Ç–∏–π
            appointment.Body = new MessageBody(BodyType.Text,
                $"{calendarEvent.Description}\n\n[CalSync-Test-Event-{DateTime.UtcNow:yyyyMMddHHmmss}]");

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            appointment.Save(SendInvitationsMode.SendToNone);

            Console.WriteLine($"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {appointment.Id}");
            return appointment.Id.ToString();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {ex.Message}");
            throw;
        }
    }

    /// <summary>
    /// –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    /// </summary>
    public async Task<bool> DeleteCalendarEventAsync(string eventId)
    {
        try
        {
            Console.WriteLine($"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: {eventId}");

            var appointment = Appointment.Bind(_service, new ItemId(eventId));

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à–µ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
            if (!IsTestEvent(appointment))
            {
                Console.WriteLine("‚ö†Ô∏è  –°–æ–±—ã—Ç–∏–µ –Ω–µ –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤–æ–µ, —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
                return false;
            }

            appointment.Delete(DeleteMode.MoveToDeletedItems);

            Console.WriteLine("‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ");
            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
    /// </summary>
    public async Task<int> DeleteAllTestEventsAsync()
    {
        try
        {
            Console.WriteLine("üßπ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π...");

            var events = await GetCalendarEventsAsync(DateTime.Today.AddDays(-30), DateTime.Today.AddDays(30));
            var deletedCount = 0;

            foreach (var evt in events)
            {
                if (!string.IsNullOrEmpty(evt.ExchangeId))
                {
                    try
                    {
                        var appointment = Appointment.Bind(_service, new ItemId(evt.ExchangeId));

                        if (IsTestEvent(appointment))
                        {
                            appointment.Delete(DeleteMode.MoveToDeletedItems);
                            deletedCount++;
                            Console.WriteLine($"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ: {evt.Summary}");
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {evt.Summary}: {ex.Message}");
                    }
                }
            }

            Console.WriteLine($"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π: {deletedCount}");
            return deletedCount;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π: {ex.Message}");
            return 0;
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º
    /// </summary>
    private bool IsTestEvent(Appointment appointment)
    {
        var body = appointment.Body?.Text ?? "";
        return body.Contains("[CalSync-Test-Event-") ||
               appointment.Subject.StartsWith("[TEST]", StringComparison.OrdinalIgnoreCase);
    }

    /// <summary>
    /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å Exchange Appointment –≤ CalendarEvent
    /// </summary>
    private CalSync.Models.CalendarEvent MapToCalendarEvent(Appointment appointment)
    {
        return new CalSync.Models.CalendarEvent
        {
            ExchangeId = appointment.Id.ToString(),
            Uid = appointment.Id.ToString(),
            Summary = appointment.Subject ?? "",
            Description = appointment.Body?.Text ?? "",
            Start = appointment.Start,
            End = appointment.End,
            Location = appointment.Location ?? "",
            LastModified = appointment.LastModifiedTime,
            Status = appointment.LegacyFreeBusyStatus switch
            {
                LegacyFreeBusyStatus.Free => EventStatus.Tentative,
                LegacyFreeBusyStatus.Busy => EventStatus.Confirmed,
                LegacyFreeBusyStatus.Tentative => EventStatus.Tentative,
                _ => EventStatus.Confirmed
            }
        };
    }

    public void Dispose()
    {
        if (!_disposed)
        {
            _disposed = true;
        }
    }
}