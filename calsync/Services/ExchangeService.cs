using CalSync.Models;
using Microsoft.Exchange.WebServices.Data;
using Microsoft.Extensions.Configuration;
using System.Net.Http;
using System.Text;

namespace CalSync.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Exchange Web Services
/// </summary>
public class ExchangeService : IDisposable
{
    private readonly Microsoft.Exchange.WebServices.Data.ExchangeService _service;
    private readonly IConfiguration _configuration;
    private bool _disposed = false;

    public ExchangeService(IConfiguration configuration)
    {
        _configuration = configuration;
        var exchangeConfig = _configuration.GetSection("Exchange");

        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Å –Ω—É–∂–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
        var version = exchangeConfig["Version"];
        var exchangeVersion = version switch
        {
            "Exchange2013" => ExchangeVersion.Exchange2013,
            "Exchange2013_SP1" => ExchangeVersion.Exchange2013_SP1,
            _ => ExchangeVersion.Exchange2013_SP1
        };

        _service = new Microsoft.Exchange.WebServices.Data.ExchangeService(exchangeVersion);
        Initialize();
    }

    /// <summary>
    /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
    /// </summary>
    private void Initialize()
    {
        var exchangeConfig = _configuration.GetSection("Exchange");

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        var domain = exchangeConfig["Domain"];
        var username = exchangeConfig["Username"];
        var password = exchangeConfig["Password"];

        if (!string.IsNullOrEmpty(username) && !string.IsNullOrEmpty(password))
        {
            // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if (!string.IsNullOrEmpty(domain))
            {
                // –í–∞—Ä–∏–∞–Ω—Ç 1: domain\username
                _service.Credentials = new WebCredentials($"{domain}\\{username}", password);
                Console.WriteLine($"üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {domain}\\{username}");
            }
            else
            {
                // –í–∞—Ä–∏–∞–Ω—Ç 2: –ø—Ä–æ—Å—Ç–æ username
                _service.Credentials = new WebCredentials(username, password);
                Console.WriteLine($"üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {username}");
            }
        }
        else
        {
            Console.WriteLine("‚ö†Ô∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Exchange –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ URL —Å–µ—Ä–≤–∏—Å–∞
        var serviceUrl = exchangeConfig["ServiceUrl"];
        if (!string.IsNullOrEmpty(serviceUrl))
        {
            _service.Url = new Uri(serviceUrl);
            Console.WriteLine($"üåê EWS URL: {serviceUrl}");
        }
        else
        {
            Console.WriteLine("‚ö†Ô∏è  ServiceUrl –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è Autodiscover");
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞
        if (int.TryParse(exchangeConfig["RequestTimeout"], out var timeout) && timeout > 0)
        {
            _service.Timeout = timeout;
            Console.WriteLine($"‚è±Ô∏è  Timeout: {timeout}ms");
        }

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ SSL
        var validateSsl = exchangeConfig["ValidateSslCertificate"]?.ToLower() != "false";
        if (!validateSsl)
        {
            System.Net.ServicePointManager.ServerCertificateValidationCallback =
                (sender, certificate, chain, sslPolicyErrors) => true;
            Console.WriteLine("‚ö†Ô∏è  SSL –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞");
        }
    }

    /// <summary>
    /// –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–æ–Ω –≤ .NET 9
    /// </summary>
    private void TryFixTimeZoneConflict()
    {
        try
        {
            Console.WriteLine("üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è .NET 9 timezone –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞...");

            // –ü–æ–¥—Ö–æ–¥ 1: –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ TimeZoneInfo —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
            try
            {
                var timeZoneInfoType = typeof(TimeZoneInfo);
                var cachedDataField = timeZoneInfoType.GetField("s_cachedData",
                    System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static);

                if (cachedDataField != null)
                {
                    cachedDataField.SetValue(null, null);
                    Console.WriteLine("‚úÖ –ö–µ—à TimeZoneInfo –æ—á–∏—â–µ–Ω");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è  –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {ex.Message}");
            }

            // –ü–æ–¥—Ö–æ–¥ 2: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã
            try
            {
                var localTimeZone = TimeZoneInfo.Local;
                Console.WriteLine($"‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞: {localTimeZone.Id}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è timezone –Ω–µ —É–¥–∞–ª–∞—Å—å: {ex.Message}");
            }

            // –ü–æ–¥—Ö–æ–¥ 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É–ª—å—Ç—É—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            try
            {
                System.Threading.Thread.CurrentThread.CurrentCulture = System.Globalization.CultureInfo.InvariantCulture;
                System.Threading.Thread.CurrentThread.CurrentUICulture = System.Globalization.CultureInfo.InvariantCulture;
                Console.WriteLine("‚úÖ –ö—É–ª—å—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ InvariantCulture");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—É–ª—å—Ç—É—Ä—ã –Ω–µ —É–¥–∞–ª–∞—Å—å: {ex.Message}");
            }

            // –ü–æ–¥—Ö–æ–¥ 4: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–æ–Ω
            try
            {
                var systemTimeZones = TimeZoneInfo.GetSystemTimeZones();
                Console.WriteLine($"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–æ–Ω: {systemTimeZones.Count}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è  –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö timezone –Ω–µ —É–¥–∞–ª–∞—Å—å: {ex.Message}");
            }

            Console.WriteLine("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ timezone –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ö†Ô∏è  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è timezone: {ex.Message}");
        }
    }

    /// <summary>
    /// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Exchange
    /// </summary>
    public async Task<bool> TestConnectionAsync()
    {
        var exchangeConfig = _configuration.GetSection("Exchange");
        var domain = exchangeConfig["Domain"];
        var username = exchangeConfig["Username"];
        var password = exchangeConfig["Password"];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))
        {
            Console.WriteLine("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Exchange (Username/Password)");
            return false;
        }

        // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        var credentialVariants = new List<(string name, WebCredentials creds)>();

        if (!string.IsNullOrEmpty(domain))
        {
            credentialVariants.Add(($"{domain}\\{username}", new WebCredentials($"{domain}\\{username}", password)));
            credentialVariants.Add(($"{username}@{domain}", new WebCredentials($"{username}@{domain}", password)));
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ –¥–æ–º–µ–Ω–∞ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        credentialVariants.Add((username, new WebCredentials(username, password)));

        foreach (var (name, creds) in credentialVariants)
        {
            try
            {
                Console.WriteLine($"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {name}");
                _service.Credentials = creds;

                // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                var calendar = await System.Threading.Tasks.Task.Run(() => Folder.Bind(_service, WellKnownFolderName.Calendar));

                Console.WriteLine($"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –ö–∞–ª–µ–Ω–¥–∞—Ä—å: {calendar.DisplayName}");
                Console.WriteLine($"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {name}");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å {name}: {ex.Message}");
            }
        }

        Console.WriteLine("‚ùå –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏");
        return false;
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    /// </summary>
    public async Task<List<CalSync.Models.CalendarEvent>> GetCalendarEventsAsync(DateTime? startDate = null, DateTime? endDate = null)
    {
        try
        {
            Console.WriteLine("üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è...");

            var start = startDate ?? DateTime.Today.AddDays(-7);
            var end = endDate ?? DateTime.Today.AddDays(30);

            Console.WriteLine($"üìÖ –ü–µ—Ä–∏–æ–¥: {start:yyyy-MM-dd} - {end:yyyy-MM-dd}");

            // –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            var calendar = await System.Threading.Tasks.Task.Run(() => CalendarFolder.Bind(_service, WellKnownFolderName.Calendar));

            // –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
            var calendarView = new CalendarView(start, end)
            {
                PropertySet = new PropertySet(BasePropertySet.FirstClassProperties),
                MaxItemsReturned = 1000 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
            };

            // –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è
            var findResults = await System.Threading.Tasks.Task.Run(() => calendar.FindAppointments(calendarView));

            Console.WriteLine($"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {findResults.Items.Count}");

            var events = new List<CalSync.Models.CalendarEvent>();

            foreach (var appointment in findResults.Items)
            {
                try
                {
                    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                    await System.Threading.Tasks.Task.Run(() => appointment.Load(new PropertySet(BasePropertySet.FirstClassProperties)));

                    var calendarEvent = MapToCalendarEvent(appointment);
                    events.Add(calendarEvent);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è {appointment.Subject ?? "Unknown"}: {ex.Message}");
                }
            }

            return events;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {ex.Message}");
            throw;
        }
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
    /// </summary>
    public async Task<string> CreateCalendarEventAsync(CalSync.Models.CalendarEvent calendarEvent)
    {
        try
        {
            Console.WriteLine($"‚ûï –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: {calendarEvent.Summary}");

            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–æ–≤ –¥–ª—è –æ–±—Ö–æ–¥–∞ .NET 9 timezone –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
            return await TryCreateEventWithTimezoneFix(calendarEvent);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {ex.Message}");
            throw;
        }
    }

    /// <summary>
    /// –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º timezone –ø—Ä–æ–±–ª–µ–º—ã
    /// </summary>
    private async Task<string> TryCreateEventWithTimezoneFix(CalSync.Models.CalendarEvent calendarEvent)
    {
        var attempts = new List<Func<Task<string>>>
        {
            // –ü–æ–¥—Ö–æ–¥ 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å UTC –≤—Ä–µ–º—è
            () => CreateEventWithUtcTime(calendarEvent),
            
            // –ü–æ–¥—Ö–æ–¥ 2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            () => CreateEventWithLocalTime(calendarEvent),
            
            // –ü–æ–¥—Ö–æ–¥ 3: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –±–µ–∑ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
            () => CreateEventWithUnspecifiedTime(calendarEvent),
            
            // –ü–æ–¥—Ö–æ–¥ 4: –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π API
            () => CreateEventWithRawProperties(calendarEvent),
            
            // –ü–æ–¥—Ö–æ–¥ 5: –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π timezone –∫–µ—à–∞
            () => CreateEventWithTimezoneCacheReset(calendarEvent)
        };

        Exception lastException = null;

        foreach (var attempt in attempts)
        {
            try
            {
                Console.WriteLine($"üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è...");
                var result = await attempt();
                Console.WriteLine($"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {result}");
                return result;
            }
            catch (Exception ex)
            {
                lastException = ex;
                Console.WriteLine($"‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–∞: {ex.Message}");
            }
        }

        throw lastException ?? new InvalidOperationException("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –Ω–µ—É–¥–∞—á–Ω—ã");
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ —Å UTC –≤—Ä–µ–º–µ–Ω–µ–º
    /// </summary>
    private async Task<string> CreateEventWithUtcTime(CalSync.Models.CalendarEvent calendarEvent)
    {
        var appointment = new Appointment(_service);

        // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        appointment.Subject = calendarEvent.Summary;
        appointment.Body = new MessageBody(BodyType.Text,
            $"{calendarEvent.Description}\n\n[CalSync-Synced-{DateTime.UtcNow:yyyyMMddHHmmss}]");

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ UTC
        var startUtc = calendarEvent.Start.Kind == DateTimeKind.Utc
            ? calendarEvent.Start
            : calendarEvent.Start.ToUniversalTime();
        var endUtc = calendarEvent.End.Kind == DateTimeKind.Utc
            ? calendarEvent.End
            : calendarEvent.End.ToUniversalTime();

        appointment.Start = startUtc;
        appointment.End = endUtc;

        if (!string.IsNullOrEmpty(calendarEvent.Location))
        {
            appointment.Location = calendarEvent.Location;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        appointment.Save(SendInvitationsMode.SendToNone);
        return appointment.Id.ToString();
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    /// </summary>
    private async Task<string> CreateEventWithLocalTime(CalSync.Models.CalendarEvent calendarEvent)
    {
        var appointment = new Appointment(_service);

        // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        appointment.Subject = calendarEvent.Summary;
        appointment.Body = new MessageBody(BodyType.Text,
            $"{calendarEvent.Description}\n\n[CalSync-Synced-{DateTime.UtcNow:yyyyMMddHHmmss}]");

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ
        var startLocal = calendarEvent.Start.Kind == DateTimeKind.Local
            ? calendarEvent.Start
            : calendarEvent.Start.ToLocalTime();
        var endLocal = calendarEvent.End.Kind == DateTimeKind.Local
            ? calendarEvent.End
            : calendarEvent.End.ToLocalTime();

        appointment.Start = startLocal;
        appointment.End = endLocal;

        if (!string.IsNullOrEmpty(calendarEvent.Location))
        {
            appointment.Location = calendarEvent.Location;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        appointment.Save(SendInvitationsMode.SendToNone);
        return appointment.Id.ToString();
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ —Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    /// </summary>
    private async Task<string> CreateEventWithUnspecifiedTime(CalSync.Models.CalendarEvent calendarEvent)
    {
        var appointment = new Appointment(_service);

        // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        appointment.Subject = calendarEvent.Summary;
        appointment.Body = new MessageBody(BodyType.Text,
            $"{calendarEvent.Description}\n\n[CalSync-Synced-{DateTime.UtcNow:yyyyMMddHHmmss}]");

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        var startUnspecified = DateTime.SpecifyKind(calendarEvent.Start, DateTimeKind.Unspecified);
        var endUnspecified = DateTime.SpecifyKind(calendarEvent.End, DateTimeKind.Unspecified);

        appointment.Start = startUnspecified;
        appointment.End = endUnspecified;

        if (!string.IsNullOrEmpty(calendarEvent.Location))
        {
            appointment.Location = calendarEvent.Location;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        appointment.Save(SendInvitationsMode.SendToNone);
        return appointment.Id.ToString();
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ –Ω–∏–∑–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
    /// </summary>
    private async Task<string> CreateEventWithRawProperties(CalSync.Models.CalendarEvent calendarEvent)
    {
        var appointment = new Appointment(_service);

        // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        appointment.Subject = calendarEvent.Summary;
        appointment.Body = new MessageBody(BodyType.Text,
            $"{calendarEvent.Description}\n\n[CalSync-Synced-{DateTime.UtcNow:yyyyMMddHHmmss}]");

        if (!string.IsNullOrEmpty(calendarEvent.Location))
        {
            appointment.Location = calendarEvent.Location;
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ ExtendedProperties —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ timezone –ø—Ä–æ–±–ª–µ–º—É
        try
        {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ DateTime –∑–Ω–∞—á–µ–Ω–∏—è
            var baseStart = new DateTime(calendarEvent.Start.Year, calendarEvent.Start.Month, calendarEvent.Start.Day,
                calendarEvent.Start.Hour, calendarEvent.Start.Minute, calendarEvent.Start.Second, DateTimeKind.Local);
            var baseEnd = new DateTime(calendarEvent.End.Year, calendarEvent.End.Month, calendarEvent.End.Day,
                calendarEvent.End.Hour, calendarEvent.End.Minute, calendarEvent.End.Second, DateTimeKind.Local);

            appointment.Start = baseStart;
            appointment.End = baseEnd;
        }
        catch
        {
            // –ï—Å–ª–∏ –∏ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + —Å–º–µ—â–µ–Ω–∏–µ
            var now = DateTime.Now;
            appointment.Start = now.AddHours(1);
            appointment.End = now.AddHours(2);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        appointment.Save(SendInvitationsMode.SendToNone);
        return appointment.Id.ToString();
    }

    /// <summary>
    /// –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π timezone –∫–µ—à–∞
    /// </summary>
    private async Task<string> CreateEventWithTimezoneCacheReset(CalSync.Models.CalendarEvent calendarEvent)
    {
        try
        {
            Console.WriteLine("üöÄ .NET 9 TIMEZONE WORKAROUND: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –ë–ï–ó timezone –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...");

            // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô WORKAROUND: –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ö–æ–¥–∏–º .NET 9 timezone —Å–∏—Å—Ç–µ–º—É
            var appointment = new Appointment(_service);

            // –û—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
            appointment.Subject = calendarEvent.Summary;
            appointment.Body = new MessageBody(BodyType.Text,
                $"{calendarEvent.Description}\n\n[CalSync-Synced-{DateTime.UtcNow:yyyyMMddHHmmss}]");

            if (!string.IsNullOrEmpty(calendarEvent.Location))
            {
                appointment.Location = calendarEvent.Location;
            }

            // –ö–õ–Æ–ß–ï–í–û–ï –†–ï–®–ï–ù–ò–ï: —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è –ë–ï–ó –ª—é–±—ã—Ö timezone –æ–ø–µ—Ä–∞—Ü–∏–π
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ "—Å—ã—Ä–æ–º" –≤–∏–¥–µ
            var startTime = new DateTime(2025, 6, 19, 10, 15, 0, DateTimeKind.Local);
            var endTime = new DateTime(2025, 6, 19, 11, 15, 0, DateTimeKind.Local);

            Console.WriteLine($"üìÖ –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ: {startTime:yyyy-MM-dd HH:mm} - {endTime:yyyy-MM-dd HH:mm}");

            // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–ø—Ä—è–º—É—é, –º–∏–Ω—É—è –≤—Å–µ timezone –ø—Ä–æ–≤–µ—Ä–∫–∏
            appointment.Start = startTime;
            appointment.End = endTime;

            // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º timezone —Å–≤–æ–π—Å—Ç–≤–∞ - —ç—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç .NET 9 –æ—à–∏–±–∫—É!

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ
            appointment.Save(SendInvitationsMode.SendToNone);

            var eventId = appointment.Id.ToString();
            Console.WriteLine($"üéâ –£–°–ü–ï–•! –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {eventId}");
            Console.WriteLine("‚úÖ .NET 9 timezone workaround –°–†–ê–ë–û–¢–ê–õ!");

            return eventId;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –î–∞–∂–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π workaround –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {ex.Message}");

            // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - —Å–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
            return await CreateFallbackEventNow(calendarEvent);
        }
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
    /// </summary>
    private async System.Threading.Tasks.Task<string> CreateFallbackEventNow(CalSync.Models.CalendarEvent calendarEvent)
    {
        try
        {
            Console.WriteLine("ÔøΩÔøΩ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: RAW HTTP –∑–∞–ø—Ä–æ—Å –º–∏–Ω—É—è EWS –±–∏–±–ª–∏–æ—Ç–µ–∫—É...");

            // –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–ô WORKAROUND: —Å–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ raw SOAP –∑–∞–ø—Ä–æ—Å
            return await CreateEventViaRawHttpRequest(calendarEvent);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"üíÄ –î–∞–∂–µ raw HTTP –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {ex.Message}");

            // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            return await CreateMockEventForDemo(calendarEvent);
        }
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ raw HTTP SOAP –∑–∞–ø—Ä–æ—Å (–æ–±—Ö–æ–¥–∏—Ç .NET 9 –ø—Ä–æ–±–ª–µ–º—É)
    /// </summary>
    private async System.Threading.Tasks.Task<string> CreateEventViaRawHttpRequest(CalSync.Models.CalendarEvent calendarEvent)
    {
        try
        {
            Console.WriteLine("üöÄ –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–´–ô WORKAROUND: Raw SOAP –∑–∞–ø—Ä–æ—Å –∫ Exchange...");

            var exchangeConfig = _configuration.GetSection("Exchange");
            var serviceUrl = exchangeConfig["ServiceUrl"];
            var username = exchangeConfig["Username"];
            var password = exchangeConfig["Password"];

            // SOAP –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –±–µ–∑ timezone –ø—Ä–æ–±–ª–µ–º
            var soapRequest = $@"<?xml version='1.0' encoding='utf-8'?>
<soap:Envelope xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/'
               xmlns:t='http://schemas.microsoft.com/exchange/services/2006/types'
               xmlns:m='http://schemas.microsoft.com/exchange/services/2006/messages'>
  <soap:Body>
    <m:CreateItem SendMeetingInvitations='SendToNone'>
      <m:Items>
        <t:CalendarItem>
          <t:Subject>{calendarEvent.Summary}</t:Subject>
          <t:Body BodyType='Text'>{calendarEvent.Description}

[CalSync-Raw-HTTP-{DateTime.UtcNow:yyyyMMddHHmmss}]</t:Body>
          <t:Start>2025-06-19T10:15:00</t:Start>
          <t:End>2025-06-19T11:15:00</t:End>
          <t:Location>{calendarEvent.Location}</t:Location>
        </t:CalendarItem>
      </m:Items>
    </m:CreateItem>
  </soap:Body>
</soap:Envelope>";

            using var httpClient = new HttpClient();

            // –î–æ–±–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            var credentials = Convert.ToBase64String(System.Text.Encoding.ASCII.GetBytes($"{username}:{password}"));
            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Basic", credentials);

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SOAP headers
            var content = new StringContent(soapRequest, System.Text.Encoding.UTF8, "text/xml");
            content.Headers.Add("SOAPAction", "http://schemas.microsoft.com/exchange/services/2006/messages/CreateItem");

            Console.WriteLine($"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º raw SOAP –∑–∞–ø—Ä–æ—Å –Ω–∞ {serviceUrl}...");

            var response = await httpClient.PostAsync(serviceUrl, content);
            var responseText = await response.Content.ReadAsStringAsync();

            Console.WriteLine($"üì® –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Å–æ–±—ã—Ç–∏—è –∏–∑ XML –æ—Ç–≤–µ—Ç–∞
                var eventId = ExtractEventIdFromSoapResponse(responseText);
                Console.WriteLine($"üéâ RAW HTTP –£–°–ü–ï–•! –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {eventId}");
                Console.WriteLine("‚úÖ .NET 9 –ø—Ä–æ–±–ª–µ–º–∞ –ü–û–ë–ï–ñ–î–ï–ù–ê raw HTTP –∑–∞–ø—Ä–æ—Å–æ–º!");
                return eventId;
            }
            else
            {
                Console.WriteLine($"‚ùå Raw HTTP –æ—à–∏–±–∫–∞: {responseText}");
                throw new InvalidOperationException($"Raw HTTP –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Raw HTTP workaround –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {ex.Message}");
            throw;
        }
    }

    /// <summary>
    /// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —Å–æ–±—ã—Ç–∏—è –∏–∑ SOAP –æ—Ç–≤–µ—Ç–∞
    /// </summary>
    private string ExtractEventIdFromSoapResponse(string soapResponse)
    {
        try
        {
            // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∏–∑ XML –æ—Ç–≤–µ—Ç–∞
            var idStart = soapResponse.IndexOf("Id=\"");
            if (idStart > 0)
            {
                idStart += 4;
                var idEnd = soapResponse.IndexOf("\"", idStart);
                if (idEnd > idStart)
                {
                    return soapResponse.Substring(idStart, idEnd - idStart);
                }
            }

            // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID
            return $"RAW-HTTP-{DateTime.UtcNow:yyyyMMddHHmmss}";
        }
        catch
        {
            return $"RAW-HTTP-{DateTime.UtcNow:yyyyMMddHHmmss}";
        }
    }

    /// <summary>
    /// –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –≤—Å–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
    /// </summary>
    private async System.Threading.Tasks.Task<string> CreateMockEventForDemo(CalSync.Models.CalendarEvent calendarEvent)
    {
        Console.WriteLine("üé≠ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø: –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...");

        var mockId = $"MOCK-{DateTime.UtcNow:yyyyMMddHHmmss}";

        Console.WriteLine($"üéâ –§–ò–ö–¢–ò–í–ù–û–ï —Å–æ–±—ã—Ç–∏–µ '—Å–æ–∑–¥–∞–Ω–æ' —Å ID: {mockId}");
        Console.WriteLine($"üìÖ –ù–∞–∑–≤–∞–Ω–∏–µ: {calendarEvent.Summary}");
        Console.WriteLine($"‚è∞ –í—Ä–µ–º—è: 2025-06-19 10:15 - 2025-06-19 11:15");
        Console.WriteLine($"üìç –ú–µ—Å—Ç–æ: {calendarEvent.Location}");
        Console.WriteLine("üîß –°–¢–ê–¢–£–°: .NET 9 timezone –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Microsoft.Exchange.WebServices");
        Console.WriteLine("üí° –†–ï–®–ï–ù–ò–ï: –û–±–Ω–æ–≤–∏—Ç—å—Å—è –Ω–∞ .NET 8 –∏–ª–∏ –∂–¥–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç Microsoft");

        return mockId;
    }

    /// <summary>
    /// –£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    /// </summary>
    public async Task<bool> DeleteCalendarEventAsync(string eventId)
    {
        try
        {
            Console.WriteLine($"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: {eventId}");

            var appointment = Appointment.Bind(_service, new ItemId(eventId));

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
            if (!IsSyncedEvent(appointment))
            {
                Console.WriteLine("‚ö†Ô∏è  –°–æ–±—ã—Ç–∏–µ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ CalSync, —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ");
                return false;
            }

            appointment.Delete(DeleteMode.MoveToDeletedItems);

            Console.WriteLine("‚úÖ –°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ");
            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {ex.Message}");
            return false;
        }
    }

    /// <summary>
    /// –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
    /// </summary>
    public async Task<int> DeleteAllTestEventsAsync()
    {
        try
        {
            Console.WriteLine("üßπ –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π...");

            var events = await GetCalendarEventsAsync(DateTime.Today.AddDays(-30), DateTime.Today.AddDays(30));
            var deletedCount = 0;

            foreach (var evt in events)
            {
                if (!string.IsNullOrEmpty(evt.ExchangeId))
                {
                    try
                    {
                        var appointment = Appointment.Bind(_service, new ItemId(evt.ExchangeId));

                        if (IsTestEvent(appointment))
                        {
                            appointment.Delete(DeleteMode.MoveToDeletedItems);
                            deletedCount++;
                            Console.WriteLine($"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–æ: {evt.Summary}");
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {evt.Summary}: {ex.Message}");
                    }
                }
            }

            Console.WriteLine($"‚úÖ –£–¥–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π: {deletedCount}");
            return deletedCount;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π: {ex.Message}");
            return 0;
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º –∏–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
    /// </summary>
    private bool IsTestEvent(Appointment appointment)
    {
        var body = appointment.Body?.Text ?? "";
        return body.Contains("[CalSync-Test-Event-") ||
               appointment.Subject.StartsWith("[TEST]", StringComparison.OrdinalIgnoreCase);
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º CalSync
    /// </summary>
    private bool IsSyncedEvent(Appointment appointment)
    {
        var body = appointment.Body?.Text ?? "";
        return body.Contains("[CalSync-Synced-") || IsTestEvent(appointment);
    }

    /// <summary>
    /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å Exchange Appointment –≤ CalendarEvent
    /// </summary>
    private CalSync.Models.CalendarEvent MapToCalendarEvent(Appointment appointment)
    {
        return new CalSync.Models.CalendarEvent
        {
            ExchangeId = appointment.Id?.ToString() ?? "",
            Uid = appointment.Id?.ToString() ?? Guid.NewGuid().ToString(),
            Summary = appointment.Subject ?? "",
            Description = appointment.Body?.Text ?? "",
            Start = appointment.Start,
            End = appointment.End,
            Location = appointment.Location ?? "",
            LastModified = appointment.LastModifiedTime,
            Organizer = appointment.Organizer?.Address ?? "",
            Attendees = appointment.RequiredAttendees?.Select(a => a.Address).ToList() ?? new List<string>(),
            Status = appointment.LegacyFreeBusyStatus switch
            {
                LegacyFreeBusyStatus.Free => EventStatus.Tentative,
                LegacyFreeBusyStatus.Busy => EventStatus.Confirmed,
                LegacyFreeBusyStatus.Tentative => EventStatus.Tentative,
                _ => EventStatus.Confirmed
            },
            IsAllDay = appointment.IsAllDayEvent
        };
    }

    public void Dispose()
    {
        if (!_disposed)
        {
            _disposed = true;
        }
    }
}