using Xunit;

namespace CalSync.Tests;

/// <summary>
/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è EwsRequestRecorder –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
/// </summary>
public class EwsRecordingExample
{
    [Fact]
    public void EwsRequestRecorder_Example_ShouldRecordAndGenerateTests()
    {
        // Arrange
        var recorder = new EwsRequestRecorder("test_recordings.json");

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
        recorder.ClearRecordings();

        // –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ GetFolder –∑–∞–ø—Ä–æ—Å–∞
        var getFolderRequest = @"<?xml version=""1.0"" encoding=""utf-8""?>
<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
  <soap:Body>
    <m:GetFolder xmlns:m=""http://schemas.microsoft.com/exchange/services/2006/messages"">
      <m:FolderShape>
        <t:BaseShape xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types"">AllProperties</t:BaseShape>
      </m:FolderShape>
      <m:FolderIds>
        <t:DistinguishedFolderId xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types"" Id=""calendar"" />
      </m:FolderIds>
    </m:GetFolder>
  </soap:Body>
</soap:Envelope>";

        var getFolderResponse = @"<?xml version=""1.0"" encoding=""utf-8""?>
<s:Envelope xmlns:s=""http://schemas.xmlsoap.org/soap/envelope/"">
  <s:Body>
    <m:GetFolderResponse xmlns:m=""http://schemas.microsoft.com/exchange/services/2006/messages"">
      <m:ResponseMessages>
        <m:GetFolderResponseMessage ResponseClass=""Success"">
          <m:ResponseCode>NoError</m:ResponseCode>
          <m:Folders>
            <t:CalendarFolder xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types"">
              <t:FolderId Id=""CALENDAR123"" ChangeKey=""CHANGE123""/>
              <t:DisplayName>–ö–∞–ª–µ–Ω–¥–∞—Ä—å</t:DisplayName>
              <t:TotalCount>5</t:TotalCount>
            </t:CalendarFolder>
          </m:Folders>
        </m:GetFolderResponseMessage>
      </m:ResponseMessages>
    </m:GetFolderResponse>
  </s:Body>
</s:Envelope>";

        // Act - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        recorder.RecordRequest("GetFolder", getFolderRequest, getFolderResponse,
            "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");

        // –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ FindItem –∑–∞–ø—Ä–æ—Å–∞
        var findItemRequest = @"<?xml version=""1.0"" encoding=""utf-8""?>
<soap:Envelope xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
  <soap:Body>
    <m:FindItem xmlns:m=""http://schemas.microsoft.com/exchange/services/2006/messages"" Traversal=""Shallow"">
      <m:ItemShape>
        <t:BaseShape xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types"">AllProperties</t:BaseShape>
      </m:ItemShape>
      <m:CalendarView StartDate=""2025-06-17T00:00:00.000Z"" EndDate=""2025-06-18T00:00:00.000Z"" />
      <m:ParentFolderIds>
        <t:FolderId xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types"" Id=""CALENDAR123"" />
      </m:ParentFolderIds>
    </m:FindItem>
  </soap:Body>
</soap:Envelope>";

        var findItemResponse = @"<?xml version=""1.0"" encoding=""utf-8""?>
<s:Envelope xmlns:s=""http://schemas.xmlsoap.org/soap/envelope/"">
  <s:Body>
    <m:FindItemResponse xmlns:m=""http://schemas.microsoft.com/exchange/services/2006/messages"">
      <m:ResponseMessages>
        <m:FindItemResponseMessage ResponseClass=""Success"">
          <m:ResponseCode>NoError</m:ResponseCode>
          <m:RootFolder TotalItemsInView=""2"" IncludesLastItemInRange=""true"">
            <t:Items xmlns:t=""http://schemas.microsoft.com/exchange/services/2006/types"">
              <t:CalendarItem>
                <t:ItemId Id=""EVENT001"" ChangeKey=""CHANGE001""/>
                <t:Subject>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ 1</t:Subject>
                <t:Start>2025-06-17T10:00:00Z</t:Start>
                <t:End>2025-06-17T11:00:00Z</t:End>
              </t:CalendarItem>
              <t:CalendarItem>
                <t:ItemId Id=""EVENT002"" ChangeKey=""CHANGE002""/>
                <t:Subject>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ 2</t:Subject>
                <t:Start>2025-06-17T14:00:00Z</t:Start>
                <t:End>2025-06-17T15:00:00Z</t:End>
              </t:CalendarItem>
            </t:Items>
          </m:RootFolder>
        </m:FindItemResponseMessage>
      </m:ResponseMessages>
    </m:FindItemResponse>
  </s:Body>
</s:Envelope>";

        recorder.RecordRequest("FindItem", findItemRequest, findItemResponse,
            "–ü–æ–∏—Å–∫ —Å–æ–±—ã—Ç–∏–π –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∑–∞ –ø–µ—Ä–∏–æ–¥");

        // Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏
        var allRecordings = recorder.GetAllRecordings();
        Assert.Equal(2, allRecordings.Count);

        var getFolderRecording = recorder.GetLatestRecording("GetFolder");
        Assert.NotNull(getFolderRecording);
        Assert.Equal("GetFolder", getFolderRecording.Action);
        Assert.Contains("GetFolder", getFolderRecording.RequestXml);
        Assert.Contains("GetFolderResponse", getFolderRecording.ResponseXml);

        var findItemRecording = recorder.GetLatestRecording("FindItem");
        Assert.NotNull(findItemRecording);
        Assert.Equal("FindItem", findItemRecording.Action);
        Assert.Contains("FindItem", findItemRecording.RequestXml);
        Assert.Contains("FindItemResponse", findItemRecording.ResponseXml);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø–∏—Å–µ–π
        var generatedTests = recorder.GenerateTests("ExampleGeneratedTests");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ—Å—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã
        Assert.NotNull(generatedTests);
        Assert.Contains("TestGetFolder", generatedTests);
        Assert.Contains("TestFindItem", generatedTests);
        Assert.Contains("ExampleGeneratedTests", generatedTests);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤ —Ñ–∞–π–ª –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        recorder.SaveGeneratedTests("GeneratedEwsTests_Example.cs", "ExampleGeneratedTests");

        Console.WriteLine("‚úÖ –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ EWS —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");
        Console.WriteLine($"üìä –ó–∞–ø–∏—Å–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {allRecordings.Count}");
        Console.WriteLine("üìÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ GeneratedEwsTests_Example.cs");
    }

    [Fact]
    public void EwsRequestRecorder_LoadExistingRecordings_ShouldWork()
    {
        // Arrange - —Å–æ–∑–¥–∞–µ–º recorder —Å —Ç–µ–º –∂–µ —Ñ–∞–π–ª–æ–º
        var recorder1 = new EwsRequestRecorder("test_recordings.json");

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        recorder1.RecordRequest("CreateItem", "<request>test</request>", "<response>success</response>");

        // Act - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π recorder —Å —Ç–µ–º –∂–µ —Ñ–∞–π–ª–æ–º
        var recorder2 = new EwsRequestRecorder("test_recordings.json");

        // Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
        var recordings = recorder2.GetAllRecordings();
        Assert.True(recordings.Count > 0);

        var createItemRecording = recorder2.GetLatestRecording("CreateItem");
        Assert.NotNull(createItemRecording);
        Assert.Equal("CreateItem", createItemRecording.Action);

        Console.WriteLine("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
    }
}