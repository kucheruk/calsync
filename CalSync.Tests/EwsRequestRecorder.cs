using System.Text.Json;
using System.Xml.Linq;

namespace CalSync.Tests;

/// <summary>
/// –ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è EWS –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
/// </summary>
public class EwsRequestRecorder
{
    private readonly List<EwsRequestResponse> _recordings = new();
    private readonly string _recordingsPath;

    public EwsRequestRecorder(string recordingsPath = "ews_recordings.json")
    {
        _recordingsPath = recordingsPath;
        LoadRecordings();
    }

    /// <summary>
    /// –ó–∞–ø–∏—Å–∞—Ç—å EWS –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç
    /// </summary>
    public void RecordRequest(string action, string requestXml, string responseXml, string? description = null)
    {
        var recording = new EwsRequestResponse
        {
            Action = action,
            RequestXml = FormatXml(requestXml),
            ResponseXml = FormatXml(responseXml),
            Description = description ?? $"EWS {action} request",
            Timestamp = DateTime.UtcNow
        };

        _recordings.Add(recording);
        SaveRecordings();

        Console.WriteLine($"üìº –ó–∞–ø–∏—Å–∞–Ω EWS –∑–∞–ø—Ä–æ—Å: {action}");
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
    /// </summary>
    public List<EwsRequestResponse> GetRecordings(string action)
    {
        return _recordings.Where(r => r.Action.Equals(action, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è
    /// </summary>
    public EwsRequestResponse? GetLatestRecording(string action)
    {
        return _recordings
            .Where(r => r.Action.Equals(action, StringComparison.OrdinalIgnoreCase))
            .OrderByDescending(r => r.Timestamp)
            .FirstOrDefault();
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
    /// </summary>
    public List<EwsRequestResponse> GetAllRecordings()
    {
        return _recordings.ToList();
    }

    /// <summary>
    /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏
    /// </summary>
    public void ClearRecordings()
    {
        _recordings.Clear();
        SaveRecordings();
        Console.WriteLine("üóëÔ∏è  –í—Å–µ –∑–∞–ø–∏—Å–∏ EWS –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—á–∏—â–µ–Ω—ã");
    }

    /// <summary>
    /// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø–∏—Å–µ–π
    /// </summary>
    public string GenerateTests(string testClassName = "GeneratedEwsTests")
    {
        var testCode = $@"using Xunit;
using System.Xml.Linq;

namespace CalSync.Tests;

/// <summary>
/// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö EWS –∑–∞–ø—Ä–æ—Å–æ–≤
/// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {DateTime.Now:yyyy-MM-dd HH:mm:ss}
/// </summary>
public class {testClassName}
{{";

        var actionGroups = _recordings.GroupBy(r => r.Action);
        var testIndex = 1;

        foreach (var group in actionGroups)
        {
            var action = group.Key;
            var recordings = group.ToList();

            for (int i = 0; i < recordings.Count; i++)
            {
                var recording = recordings[i];
                var testName = recordings.Count > 1
                    ? $"Test{action}_{i + 1:D2}"
                    : $"Test{action}";

                testCode += $@"

    [Fact]
    public void {testName}()
    {{
        // Arrange - {recording.Description}
        var expectedRequest = @""{EscapeString(recording.RequestXml)}"";
        var expectedResponse = @""{EscapeString(recording.ResponseXml)}"";

        // Act - –ø–∞—Ä—Å–∏–º XML –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
        var requestDoc = XDocument.Parse(expectedRequest);
        var responseDoc = XDocument.Parse(expectedResponse);

        // Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        Assert.NotNull(requestDoc.Root);
        Assert.NotNull(responseDoc.Root);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ SOAP —Å–æ–æ–±—â–µ–Ω–∏—è
        Assert.Equal(""Envelope"", requestDoc.Root.Name.LocalName);
        Assert.Equal(""Envelope"", responseDoc.Root.Name.LocalName);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Body
        var requestBody = requestDoc.Descendants().FirstOrDefault(x => x.Name.LocalName == ""Body"");
        var responseBody = responseDoc.Descendants().FirstOrDefault(x => x.Name.LocalName == ""Body"");
        
        Assert.NotNull(requestBody);
        Assert.NotNull(responseBody);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ EWS –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–ø—Ä–æ—Å–µ
        var ewsAction = requestBody.Descendants().FirstOrDefault(x => x.Name.LocalName == ""{action}"");
        Assert.NotNull(ewsAction);
        
        Console.WriteLine(""‚úÖ –¢–µ—Å—Ç {testName} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ"");
    }}";
                testIndex++;
            }
        }

        testCode += @"
}";

        return testCode;
    }

    /// <summary>
    /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤ —Ñ–∞–π–ª
    /// </summary>
    public void SaveGeneratedTests(string filePath, string testClassName = "GeneratedEwsTests")
    {
        var testCode = GenerateTests(testClassName);
        File.WriteAllText(filePath, testCode);
        Console.WriteLine($"üíæ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filePath}");
    }

    /// <summary>
    /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø–∏—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞
    /// </summary>
    private void LoadRecordings()
    {
        if (File.Exists(_recordingsPath))
        {
            try
            {
                var json = File.ReadAllText(_recordingsPath);
                var recordings = JsonSerializer.Deserialize<List<EwsRequestResponse>>(json);
                if (recordings != null)
                {
                    _recordings.AddRange(recordings);
                    Console.WriteLine($"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {recordings.Count} –∑–∞–ø–∏—Å–µ–π EWS –∑–∞–ø—Ä–æ—Å–æ–≤");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π: {ex.Message}");
            }
        }
    }

    /// <summary>
    /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
    /// </summary>
    private void SaveRecordings()
    {
        try
        {
            var json = JsonSerializer.Serialize(_recordings, new JsonSerializerOptions
            {
                WriteIndented = true
            });
            File.WriteAllText(_recordingsPath, json);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: {ex.Message}");
        }
    }

    /// <summary>
    /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å XML –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    /// </summary>
    private string FormatXml(string xml)
    {
        try
        {
            var doc = XDocument.Parse(xml);
            return doc.ToString();
        }
        catch
        {
            return xml; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        }
    }

    /// <summary>
    /// –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–¥–µ
    /// </summary>
    private string EscapeString(string str)
    {
        return str.Replace("\"", "\"\"");
    }
}

/// <summary>
/// –ú–æ–¥–µ–ª—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è EWS –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞
/// </summary>
public class EwsRequestResponse
{
    public string Action { get; set; } = string.Empty;
    public string RequestXml { get; set; } = string.Empty;
    public string ResponseXml { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public DateTime Timestamp { get; set; }
}