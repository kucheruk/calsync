using CalSync.Models;
using Microsoft.Extensions.Configuration;
using Xunit;
using ExchangeService = CalSync.Services.ExchangeService;

namespace CalSync.Tests;

/// <summary>
/// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º Exchange —Å–µ—Ä–≤–µ—Ä–æ–º
/// –¢—Ä–µ–±—É–µ—Ç –Ω–∞–ª–∏—á–∏—è appsettings.Local.json —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ Exchange
/// </summary>
[Collection("Exchange Integration")]
public class ExchangeIntegrationTests : IDisposable
{
    private readonly ExchangeService? _exchangeService;
    private readonly bool _isConfigured;

    public ExchangeIntegrationTests()
    {
        try
        {
            // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            var configuration = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json", optional: true)
                .AddJsonFile("appsettings.Local.json", optional: true)
                .Build();

            var exchangeConfig = configuration.GetSection("Exchange");
            var serviceUrl = exchangeConfig["ServiceUrl"];
            var username = exchangeConfig["Username"];
            var password = exchangeConfig["Password"];

            if (!string.IsNullOrEmpty(serviceUrl) && !string.IsNullOrEmpty(username) && !string.IsNullOrEmpty(password))
            {
                _exchangeService = new ExchangeService(configuration);
                _isConfigured = true;
            }
            else
            {
                _isConfigured = false;
            }
        }
        catch
        {
            _isConfigured = false;
        }
    }

    [Fact]
    public async Task TestConnection_WithRealExchange_ShouldConnect()
    {
        // Skip if not configured
        if (!_isConfigured || _exchangeService == null)
        {
            Assert.True(true, "–¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω - Exchange –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
            return;
        }

        // Act
        var result = await _exchangeService.TestConnectionAsync();

        // Assert
        Assert.True(result, "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É Exchange –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É—Å–ø–µ—à–Ω—ã–º");
    }

    [Fact]
    public async Task GetCalendarEvents_WithRealExchange_ShouldReturnEvents()
    {
        // Skip if not configured
        if (!_isConfigured || _exchangeService == null)
        {
            Assert.True(true, "–¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω - Exchange –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
            return;
        }

        // Act
        var events = await _exchangeService.GetCalendarEventsAsync();

        // Assert
        Assert.NotNull(events);

        // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        Console.WriteLine($"üìÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {events.Count}");

        if (events.Count > 0)
        {
            var firstEvent = events[0];
            Console.WriteLine($"üìã –ü–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ:");
            Console.WriteLine($"   –ù–∞–∑–≤–∞–Ω–∏–µ: {firstEvent.Summary}");
            Console.WriteLine($"   –í—Ä–µ–º—è: {firstEvent.Start:yyyy-MM-dd HH:mm} - {firstEvent.End:yyyy-MM-dd HH:mm}");
            Console.WriteLine($"   –ú–µ—Å—Ç–æ: {firstEvent.Location}");
            Console.WriteLine($"   ID: {firstEvent.ExchangeId}");
            Console.WriteLine($"   –°—Ç–∞—Ç—É—Å: {firstEvent.Status}");
        }

        // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        foreach (var evt in events.Take(5)) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–æ–±—ã—Ç–∏–π
        {
            Assert.NotNull(evt.ExchangeId);
            Assert.NotEmpty(evt.ExchangeId);
            Assert.NotNull(evt.Summary);
            Assert.True(evt.Start != DateTime.MinValue);
            Assert.True(evt.End != DateTime.MinValue);
            Assert.True(evt.End >= evt.Start);
        }
    }

    [Fact]
    public async Task CreateAndDeleteTestEvent_WithRealExchange_ShouldWork()
    {
        // Skip if not configured
        if (!_isConfigured || _exchangeService == null)
        {
            Assert.True(true, "–¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω - Exchange –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
            return;
        }

        // Arrange
        var testEvent = new CalendarEvent
        {
            Summary = $"[TEST] CalSync Integration Test - {DateTime.Now:yyyy-MM-dd HH:mm:ss}",
            Description = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ CalSync —Å Exchange",
            Start = DateTime.Now.AddHours(1),
            End = DateTime.Now.AddHours(2),
            Location = "–¢–µ—Å—Ç–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"
        };

        string? createdEventId = null;

        try
        {
            // Act - —Å–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            createdEventId = await _exchangeService.CreateCalendarEventAsync(testEvent);

            // Assert - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
            Assert.NotNull(createdEventId);
            Assert.NotEmpty(createdEventId);
            Console.WriteLine($"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å ID: {createdEventId}");

            // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            await Task.Delay(2000);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –ø–æ—è–≤–∏–ª–æ—Å—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
            var events = await _exchangeService.GetCalendarEventsAsync(
                DateTime.Today,
                DateTime.Today.AddDays(2));

            var createdEvent = events.FirstOrDefault(e => e.Summary.Contains("CalSync Integration Test"));
            Assert.NotNull(createdEvent);
            Console.WriteLine($"‚úÖ –°–æ–±—ã—Ç–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: {createdEvent.Summary}");
        }
        finally
        {
            // Cleanup - —É–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            if (!string.IsNullOrEmpty(createdEventId))
            {
                try
                {
                    var deleteResult = await _exchangeService.DeleteCalendarEventAsync(createdEventId);
                    Console.WriteLine($"üóëÔ∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è: {deleteResult}");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ: {ex.Message}");
                }
            }
        }
    }

    [Fact]
    public async Task CleanupTestEvents_WithRealExchange_ShouldRemoveTestEvents()
    {
        // Skip if not configured
        if (!_isConfigured || _exchangeService == null)
        {
            Assert.True(true, "–¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω - Exchange –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
            return;
        }

        // Act
        var deletedCount = await _exchangeService.DeleteAllTestEventsAsync();

        // Assert
        Console.WriteLine($"üßπ –£–¥–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π: {deletedCount}");
        Assert.True(deletedCount >= 0, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å >= 0");
    }

    [Fact]
    public async Task GetCalendarEvents_PerformanceTest_ShouldCompleteInReasonableTime()
    {
        // Skip if not configured
        if (!_isConfigured || _exchangeService == null)
        {
            Assert.True(true, "–¢–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω - Exchange –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
            return;
        }

        // Arrange
        var stopwatch = System.Diagnostics.Stopwatch.StartNew();

        // Act
        var events = await _exchangeService.GetCalendarEventsAsync();

        // Assert
        stopwatch.Stop();
        Console.WriteLine($"‚è±Ô∏è  –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è {events.Count} —Å–æ–±—ã—Ç–∏–π: {stopwatch.ElapsedMilliseconds} –º—Å");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∑–∞ —Ä–∞–∑—É–º–Ω–æ–µ –≤—Ä–µ–º—è (–º–µ–Ω–µ–µ 30 —Å–µ–∫—É–Ω–¥)
        Assert.True(stopwatch.ElapsedMilliseconds < 30000,
            $"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∑–∞–Ω—è–ª–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {stopwatch.ElapsedMilliseconds} –º—Å");
    }

    public void Dispose()
    {
        _exchangeService?.Dispose();
    }
}